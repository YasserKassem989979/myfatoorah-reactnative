{"version":3,"file":"index.es.js","sources":["../src/Network/Response.js","../src/MFSettings.js","../src/Network/TypeCheck.js","../src/Network/Request.js","../src/Network/LOGGER.js","../src/Network/RNETWORK.js","../src/Models.js","../src/Enums.js","../src/MFPaymentRequest/MFPaymentRequest.js","../src/MFPaymentRequest/MFPaymentRequest.HelperMethods.js","../src/MFWebView.js","../src/MFCardPaymentView.js","../src/MFInAppApplePayView.js"],"sourcesContent":["export default class Response {\n  constructor() {\n    this.body = '';\n    this.error = null;\n  }\n\n  setBody(body) {\n    this.body = body;\n  }\n\n  getBodyString() {\n    return this.body;\n  }\n\n  getBodyJson() {\n    return JSON.parse(this.body);\n  }\n\n  setError(errorMessage, error) {\n    this.error = {\n      message: errorMessage,\n      error: error\n    }\n  }\n\n  getError() {\n    return this.error;\n  }\n\n  toString() {\n    return JSON.stringify({\n      body: this.body,\n      error: this.error,\n    });\n  }\n  getSessionId() {\n    return this.getBodyJson().Data.SessionId\n  }\n  getCountryCode() {\n    return this.getBodyJson().Data.CountryCode\n  }\n  getPaymentMethods() {\n    return this.getBodyJson().Data.PaymentMethods\n  }\n  getInvoiceId() {\n    return this.getBodyJson().Data.InvoiceId\n  }\n  getPaymentURL() {\n    return this.getBodyJson().Data.PaymentURL\n  }\n  getData() {\n    return this.getBodyJson().Data\n  }\n\n  errorMessage(fromDirectPayment, fromExecute) {\n    if (this.error) {\n      return this.getError().error\n    }\n    if (this.getBodyJson().IsSuccess) {\n      if (!fromDirectPayment) {\n        if (this.getBodyJson().Data.IsDirectPayment) {\n          return 'For direct payment please call executeDirectPayment method'\n        }\n      }\n      if (fromExecute) {\n        if (this.getBodyJson().Data.PaymentURL === undefined) {\n          return 'There is no payment URL'\n        }\n      }\n      if(this.getBodyJson().Data.InvoiceTransactions !== undefined) {\n        var message = ''\n        this.getBodyJson().Data.InvoiceTransactions.forEach(element => {\n          if (element.TransactionStatus == \"Succss\") {\n            return ''\n          } else if (element.TransactionStatus == \"Failed\") {\n            message = element.Error\n          }\n        })\n        return message\n      }\n      return ''\n    }\n    var message = this.getBodyJson().Message + '\\n'\n    if (this.getBodyJson().ValidationErrors !== null) {\n      this.getBodyJson().ValidationErrors.forEach(element => {\n        message = message + element.Name + ': ' + element.Error + '\\n'\n      });\n    }\n    return message\n  }\n\n}\n","\nexport class MFSettings {\n    static sharedInstance = MFSettings.sharedInstance == null ? new MFSettings() : MFSettings.sharedInstance\n    configure(baseURL, token) {\n      this.environment = baseURL\n        if (baseURL.charAt(baseURL.length-1) !== \"/\") {\n            this.baseURL = baseURL + '/';\n        } else {\n            this.baseURL = baseURL;\n        }\n      this.token = token\n    }\n  \n    getBaseURL() {\n      return  this.baseURL + 'v2/';\n    }\n    getToken() {\n      return this.token\n    }\n    setTheme(theme) {\n      this.theme = theme\n    }\n    getTheme() {\n      if(this.theme === undefined) {\n        return new MFTheme('red', 'gray', 'Payment', 'Cancel')\n      }\n      return this.theme\n    }\n    getInvironment() {\n      return this.environment\n    }\n  }\n\n  export function MFTheme(navigationTintColor, navigationBarTintColor, navigationTitle, cancelButtonTitle) {\n    this.navigationTintColor = navigationTintColor\n    this.navigationBarTintColor = navigationBarTintColor\n    this.navigationTitle = navigationTitle\n    this.cancelButtonTitle = cancelButtonTitle\n}","export default class TypeCheck{\n\n  static isObject(obj) {\n    return (Object.prototype.toString.call(obj) === '[object Object]');\n  }\n\n  static isArray(arr) {\n    return (Object.prototype.toString.call(arr) === '[object Array]');\n  }\n\n  static isString(str) {\n    return (Object.prototype.toString.call(str) === '[object String]');\n  }\n\n  static isEmpty(value) {\n    return (value === undefined || value === null || value.trim() === '');\n  }\n\n  static isEmptyObject(value) {\n    return (value === undefined || value === null);\n  }\n\n  static isValidUrl(url) {\n    let regx = /^(http[s]?:\\/\\/){0,1}(www\\.){0,1}[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,5}[\\.]{0,1}/;\n    return regx.test(url)\n  }\n\n}\n","import TypeCheck from './TypeCheck';\n\nexport default class Request{\n\n  static TYPES() {\n    return {\n      'string' : 1,\n      'json' : 2,\n      'form' : 3\n    };\n  }\n\n  constructor(url) {\n    this.setUrl(url);\n    this.headers = {};\n  }\n\n  setUrl(url) {\n    if (!TypeCheck.isString(url) || TypeCheck.isEmpty(url)) {\n      throw new Error(\"Invalid url string\");\n    }else if(!TypeCheck.isValidUrl(url)){\n      throw new Error(\"Invalid url string\");\n    }\n    this.url = url;\n  }\n\n  getUrl() {\n    return this.url;\n  }\n\n  addHeader(key, value) {\n    if (TypeCheck.isObject(key) || TypeCheck.isArray(key)) {\n      throw new Error(\"Invalid header key type\");\n    }\n    if (TypeCheck.isObject(value) || TypeCheck.isArray(value)) {\n      throw new Error(\"Invalid header value type\");\n    }\n    this.headers[key] = value;\n  }\n\n  addHeaders(headersObj) {\n    if (!TypeCheck.isObject(headersObj)) {\n      throw new Error(\"Invalid header object type\");\n    }\n    for (var property in headersObj) {\n      this.headers[property] = headersObj[property];\n    }\n  }\n\n  getHeaders() {\n    return this.headers;\n  }\n\n  setStringData(stringData) {\n    if (TypeCheck.isObject(stringData) || TypeCheck.isArray(stringData)) {\n      throw new Error(\"Invalid string data\");\n    }\n    this.stringData = stringData;\n    this.type = Request.TYPES().string;\n    this.data = stringData;\n  }\n\n  getStringData() {\n    return this.stringData;\n  }\n\n  setFormData(fromData) {\n    if (TypeCheck.isObject(fromData)) {\n      this.fromData = fromData;\n      this.type = Request.TYPES().form;\n      this.data = Request.generateFormBody(this.formData);\n    }else{\n      throw new Error(\"Invalid form data params\");\n    }\n  }\n\n  getFormData() {\n    return this.fromData;\n  }\n\n  setJsonData(jsonData) {\n    if (TypeCheck.isObject(jsonData) || TypeCheck.isArray(jsonData)) {\n      this.jsonData = jsonData;\n      this.type = Request.TYPES().json;\n      this.data = JSON.stringify(this.jsonData);\n    }else{\n      throw new Error(\"Invalid json data\");\n    }\n  }\n  getJsonData() {\n    return this.jsonData;\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  static generateFormBody(requestObj) {\n    let formBody = [];\n    for (let property in requestObj) {\n      let encodedKey = encodeURIComponent(property);\n      let encodedValue = encodeURIComponent(requestObj[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    return formBody;\n  }\n\n  setQueryParams(queryParams) {\n    if (TypeCheck.isObject(queryParams)) {\n      this.queryParamsMap = queryParams;\n      this.queryParams = \"?\" + Request.generateFormBody(queryParams);\n    }else{\n      throw new Error(\"Invalid query params\");\n    }\n  }\n\n  getQueryParams() {\n    return this.queryParams;\n  }\n\n  getQueryParamsMap() {\n    return this.queryParamsMap;\n  }\n\n}\n","import RNETWORK from './RNETWORK';\n\nexport default class LOGGER {\n\n  static log(message, error){\n    if(RNETWORK.DEBUG_ENABLED == true){\n      if(error){\n        console.log(message, error);\n      }else{\n        console.log(message);\n      }\n    }\n  }\n\n}\n","import Request from './Request';\nimport TypeCheck from './TypeCheck';\nimport LOGGER from './LOGGER';\nimport Response from './Response';\n\nexport default class RNETWORK {\n\n  static DEBUG_ENABLED = false;\n\n  static get(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'GET',\n        headers: request.getHeaders(),\n      }).then((apiResponse) => {\n        LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n        response.setStatus(apiResponse.status);\n        response.setHeaders(apiResponse.headers.map);\n        response.setUrl(apiResponse.url);\n        response.setBody(apiResponse._bodyText);\n        postExecuteCallback(response);\n      }).catch((error) => {\n        LOGGER.log(\"Error\", error);\n        response.setError(\"Network Connection Failed\", error);\n        postExecuteCallback(response);\n      });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n\n  static post(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'POST',\n        headers: request.getHeaders(),\n        body: request.getData()\n      })\n        .then(response => {\n          return response.text()\n        })\n        .then((apiResponse) => {\n          LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n          response.setBody(apiResponse);\n          // response.setBody(JSON.stringify(apiResponse));\n          postExecuteCallback(response);\n        }).catch((error) => {\n          LOGGER.log(\"Error\", error);\n          response.setError(\"Network Connection Failed\", error);\n          postExecuteCallback(response);\n        });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n\n}\n","import { CALLBACK_URL, ERROR_URL } from './index.js';\n\nexport function MFPaymentStatusRequest(key, keyType) {\n  this.key = key\n  this.keyType = keyType\n}\n\nexport function MFInitiatePayment(invoiceAmount, currencyIso) {\n  this.invoiceAmount = invoiceAmount\n  this.currencyIso = currencyIso\n}\nexport function MFExecutePaymentRequest(invoiceValue, paymentMethod, callBackUrl, errorUrl) {\n  this.invoiceValue = invoiceValue\n  if (paymentMethod === undefined) {\n    this.paymentMethod = ''\n  } else {\n   this.paymentMethod = paymentMethod\n  }\n  if (callBackUrl === undefined) {\n    this.callBackUrl = CALLBACK_URL\n  } else {\n    this.callBackUrl = callBackUrl\n  }\n  if (errorUrl === undefined) {\n    this.errorUrl = ERROR_URL\n  } else {\n    this.errorUrl = errorUrl\n  }\n\n  this.customerName = ''\n  this.customerCivilId = ''\n  this.customerReference = ''\n  this.customerEmail = ''\n  this.customerMobile = ''\n  this.invoiceItems = []\n  this.language = 'en'\n  this.expiryDate = null\n  this.customerAddress = new MFCustomerAddress('', '', '', '', '')\n  this.userDefinedField = ''\n  this.displayCurrencyIso = ''\n  this.mobileCountryCode = ''\n  this.supplierCode = 0\n  this.supplierValue = 0\n  this.suppliers = []\n  this.sessionId = ''\n}\n\nexport function MFProduct(name, unitPrice, quantity) {\n  this.name = name\n  this.unitPrice = unitPrice\n  this.quantity = quantity\n}\n\nexport function MFSupplier(supplierCode, proposedShare, invoiceShare) {\n  this.supplierCode = supplierCode\n  this.proposedShare = proposedShare\n  this.invoiceShare = invoiceShare\n}\n\nexport function MFCustomerAddress(block, street, houseBuildingNo, address, addressInstructions) {\n  this.block = block\n  this.street = street\n  this.houseBuildingNo = houseBuildingNo\n  this.address = address\n  this.addressInstructions = addressInstructions\n}\n\nexport function MFCardInfo(\n  cardNumber: String,\n  cardExpiryMonth: String,\n  cardExpiryYear: String,\n  cardSecurityCode: String,\n  cardHolderName: String,\n  paymentType: String,\n  saveToken: Boolean) {\n  this.paymentType = paymentType\n  this.card = new MFCard(cardNumber, cardExpiryMonth, cardExpiryYear, cardSecurityCode, cardHolderName)\n  this.saveToken = saveToken\n  this.bypass = true\n}\n\nfunction MFCard(number, expiryMonth, expiryYear, securityCode, cardHolderName) {\n  this.number = number\n  this.expiryMonth = expiryMonth\n  this.expiryYear = expiryYear\n  this.securityCode = securityCode\n  this.cardHolderName = cardHolderName\n}\n\nexport function MFSendPaymentRequest(invoiceValue, notificationOption, customerName) {\n  this.invoiceValue = invoiceValue\n  this.customerName = customerName\n  this.notificationOption = notificationOption\n  this.mobileCountryIsoCode = '+965'\n  this.displayCurrencyIso = 'KWD'\n  this.customerCivilId = ''\n  this.customerReference = ''\n  this.customerEmail = ''\n  this.customerMobile = ''\n  this.invoiceItems = []\n  this.language = 'en'\n  this.expiryDate = null\n  this.errorUrl = ''\n  this.customerAddress = new MFCustomerAddress('', '', '', '', '')\n  this.callBackUrl = ''\n  this.userDefinedField = ''\n  this.supplierCode = 0\n  this.supplierValue = 0\n}","\nexport const MFLanguage = Object.freeze({\n    ARABIC: 'ar',\n    ENGLISH: 'en'\n});\n\nexport const MFNotificationOption = Object.freeze({\n    ALL: 'all',\n    EMAIL: 'eml',\n    SMS: 'sms',\n    LINK: 'lnk'\n});\n\nexport const MFPaymentype = Object.freeze({\n    CARD: 'card',\n    TOKEN: 'token'\n})\n\nexport const MFMobileCountryCodeISO = Object.freeze({\n    KUWAIT: '+965',\n    SAUDIARABIA: '+966',\n    BAHRAIN: '+973',\n    UAE: '+971',\n    QATAR: '+974',\n    OMAN: '+968',\n    JORDAN: '+962'\n});\n\nexport const MFCurrencyISO = Object.freeze({\n    KUWAIT_KWD: 'KWD',\n    SAUDIARABIA_SAR: 'SAR',\n    BAHRAIN_BHD: 'BHD',\n    UAE_AED: 'AED',\n    QATAR_QAR: 'QAR',\n    OMAN_MOR: 'OMR',\n    JORDAN_JOD: 'JOD',\n    UNITEDSTATES_USD: 'USD',\n    EURO_EUR: 'EUR'\n})\n\nexport const MFKeyType = Object.freeze({\n    INVOICEID: 'InvoiceId',\n    PAYMENTID: 'PaymentId'\n})\n\nexport const MFPaymentMethodCode = Object.freeze({\n    AMEX: \"ae\",\n    SADAD: \"s\",\n    BENEFIT: \"b\",\n    UAEDEBITCARDS: \"uaecc\",\n    QATARDEBITCARDS: \"np\",\n    MADA: \"md\",\n    KFAST: \"kf\",\n    KNET: \"kn\",\n    APPLEPAY: \"ap\",\n    AFS: \"af\",\n    VISAMASTER: \"vm\",\n    STCPAY: \"stc\"\n})\nexport const MFEnvironment = Object.freeze({\n    TEST: 'https://apitest.myfatoorah.com',\n    LIVE: 'https://api.myfatoorah.com'\n})","import Response from '../Network/Response'\nimport {\n  MFInitiatePayment,\n  MFExecutePaymentRequest,\n  MFPaymentStatusRequest,\n  MFCardInfo,\n  MFSendPaymentRequest\n} from '../Models.js';\nimport {\n  executePaymentJson,\n  sendPaymentJson,\n  issueRequest,\n  parse\n} from './MFPaymentRequest.HelperMethods.js'\nimport { MFPaymentMethodCode } from '../Enums.js'\nimport { Platform } from 'react-native'\n\n/**\n * @class\n * @classdesc A handle payment requests.\n */\nexport default class MFPaymentRequest {\n  /**\n   * A `MFPaymentRequest` access all MFPaymentRequest methods with same object. \n   * @type {MFPaymentRequest}\n   */\n  static sharedInstance = MFPaymentRequest.sharedInstance == null ? new MFPaymentRequest() : MFPaymentRequest.sharedInstance\n  \n   /**\n    * Retrieves all payment methods available for the user token.\n    * @param  {MFInitiatePayment} request - initiate payment object.\n    * @param  {string} apiLanguage - API language.\n    * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n    */   \n  initiatePayment(request: MFInitiatePayment, apiLanguage, postExecuteCallback) {\n    var jsonData = {\n      'InvoiceAmount': request.invoiceAmount,\n      'CurrencyIso': request.currencyIso\n    };\n    issueRequest(jsonData, 'InitiatePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        if (Platform.OS === 'ios') {\n          postExecuteCallback(response)\n        } else {\n          if (response.getPaymentMethods() !== null) {\n            var data = {PaymentMethods:[]}\n            response.getPaymentMethods().forEach(element => {\n              if (element.PaymentMethodCode !== MFPaymentMethodCode.APPLEPAY) {\n                data.PaymentMethods.push(element)\n              }\n            });\n            var dataString = JSON.stringify(data)\n            var body = '{\"IsSuccess\":'+ response.getBodyJson().IsSuccess + ',\"Message\":\"'+  response.getBodyJson().Message + '\",\"ValidationErrors\":'+ response.getBodyJson().ValidationErrors + ',\"Data\":' + dataString + '}'\n            var response2 = new Response()\n            response2.setBody(body)\n            postExecuteCallback(response2)\n          } else {\n            postExecuteCallback(response)\n          }\n      }\n    }\n    });\n  }\n\n     /**\n    * Initiate session id.\n    * @param  {string} apiLanguage - API language.\n    * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n    */   \n   initiateSession(apiLanguage, postExecuteCallback) {\n    issueRequest(undefined, 'InitiateSession', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n          postExecuteCallback(response)\n    }\n    });\n   }\n\n  /**\n   * execute normal payment.\n   * \n   * @param  navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - execute payment request object.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executePayment(navigation, request: MFExecutePaymentRequest, apiLanguage, postExecuteCallback) {\n\n    var jsonData = executePaymentJson(request);\n\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, true)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        const url = response.getPaymentURL()\n        navigation.navigate('MFWebView', { link: url, apiLanguage: apiLanguage, postExecuteCallback: postExecuteCallback });\n      }\n    });\n  }  \n  /**\n   * get payment status by invoice id or payment id.\n   * @param  {MFPaymentStatusRequest} paymentStatus - payment status request object.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n   getPaymentStatus(paymentStatus: MFPaymentStatusRequest, apiLanguage, postExecuteCallback) {\n    var jsonData = {\n      'Key': paymentStatus.key,\n      'KeyType': paymentStatus.keyType\n    };\n\n    issueRequest(jsonData, \"GetPaymentStatus\", apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response)\n      }\n    })\n  }\n  \n  /**\n   * execute recurring payment.\n   * @param  {Navigation} navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - exeute payment request object.\n   * @param  {MFCardInfo} cardInfo - card information object\n   * @param  {Int} intervalDays - interval days for recurring\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executeRecurringPayment(navigation, request: MFExecutePaymentRequest, cardInfo: MFCardInfo, intervalDays, apiLanguage, postExecuteCallback) {\n    var jsonData = executePaymentJson(request);\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(true, true)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, intervalDays);\n      }\n    });\n  }\n\n  /**\n   * execute direct payment.\n   * @param  {Navigation} navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - exeute payment request object.\n   * @param  {MFCardInfo} cardInfo - card information object\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executeDirectPayment(navigation, request: MFExecutePaymentRequest, cardInfo: MFCardInfo, apiLanguage, postExecuteCallback) {\n    var jsonData = executePaymentJson(request);\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(true, true)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, undefined);\n      }\n    });\n  }\n  \n  /**\n   * cancel recurring payment.\n   * @param  {String} recurringId - recurring id to cancel.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  cancelRecurringPayment(recurringId: String, apiLanguage, postExecuteCallback) {\n    var encodedRecurringId = encodeURIComponent(recurringId)\n    issueRequest(undefined, 'CancelRecurringPayment?recurringId=' + encodedRecurringId, apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response);\n      }\n    })\n  }\n  \n  /**\n   * to create payment link and send it by link, sms, email, or all.\n   * @param  {MFSendPaymentRequest} request - send payment request object.\n   * @param  {string} apiLanguage - callback to handle response.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  sendPayment(request: MFSendPaymentRequest, apiLanguage, postExecuteCallback) {\n    let jsonData = sendPaymentJson(request)\n\n    issueRequest(jsonData, 'SendPayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response)\n      }\n    })\n  }\n}\n","import Request from '../Network/Request';\nimport RNETWORK from '../Network/RNETWORK';\nimport Response from '../Network/Response';\nimport { MFSettings } from '../MFSettings.js';\nimport { MFKeyType } from '../index.js'\nimport { Platform } from 'react-native'\nimport {MFPaymentStatusRequest} from '../Models.js'\nimport MFPaymentRequest from '../MFPaymentRequest/MFPaymentRequest.js'\n//region REQUEST HANDLE METHODS\nexport function executePaymentJson(request) {\n    if (request.callBackUrl.length !== 0) {\n        CALLBACK_URL = request.callBackUrl;\n    }\n    if (request.errorUrl.length !== 0) {\n        ERROR_URL = request.errorUrl;\n    }\n    \n    var callerType = 'android'\n    var callerOS = 'android'\n    if (Platform.OS === 'ios') {\n        callerOS = 'ios'\n        if(Platform.isPad) {\n            callerType = 'ipad'\n        } else {\n            callerType = 'phone'\n        }\n      }\n    var sourceInfo =   callerType + '-' + callerOS + '-' + Platform.Version + '-react_native-0.0.181'\n    var jsonData = {\n        \"InvoiceValue\": request.invoiceValue,\n        \"CallBackUrl\": CALLBACK_URL,\n        \"ErrorUrl\": ERROR_URL,\n        \"DisplayCurrencyIso\": request.displayCurrencyIso,\n        \"MobileCountryCode\": request.mobileCountryCode,\n        \"UserDefinedField\": request.userDefinedField,\n        \"CustomerName\": request.customerName,\n        \"CustomerCivilId\": request.customerCivilId,\n        \"CustomerReference\": request.customerReference,\n        \"CustomerMobile\": request.customerMobile,\n        \"CustomerEmail\": request.customerEmail,\n        \"Language\": request.language,\n        \"SupplierCode\": request.supplierCode,\n        \"SupplierValue\": request.supplierValue,\n        \"SourceInfo\": sourceInfo\n    };\n    if (request.paymentMethod === '') {\n        jsonData.SessionId = request.sessionId\n    } else {\n        jsonData.PaymentMethodId = request.paymentMethod\n    }\n    if (request.expiryDate !== null) {\n        jsonData.ExpiryDate = request.expiryDate.toISOString();\n    }\n    var invoiceItems = [];\n    for (var i in request.invoiceItems) {\n        var product = request.invoiceItems[i];\n        invoiceItems.push({\n            \"ItemName\": product.name,\n            \"Quantity\": product.quantity,\n            \"UnitPrice\": product.unitPrice\n        });\n    }\n    var suppliers = [];\n    for (var i in request.suppliers) {\n        var supplier = request.suppliers[i];\n        suppliers.push({\n            \"SupplierCode\": supplier.supplierCode,\n            \"ProposedShare\": supplier.proposedShare,\n            \"InvoiceShare\": supplier.invoiceShare\n        });\n    }\n    if (invoiceItems.length !== 0) {\n        jsonData.InvoiceItems = invoiceItems;\n    }\n\n    if (suppliers.length !== 0) {\n        jsonData.Suppliers = suppliers;\n    }\n    var customerAddress = request.customerAddress;\n    var customerAddressData = {\n        \"Block\": customerAddress.block,\n        \"Street\": customerAddress.street,\n        \"HouseBuildingNo\": customerAddress.houseBuildingNo,\n        \"Address\": customerAddress.address,\n        \"AddressInstructions\": customerAddress.addressInstructions\n    };\n    jsonData.CustomerAddress = customerAddressData;\n    return jsonData;\n}\nexport function sendPaymentJson(request) {\n    if (request.callBackUrl.length !== 0) {\n        CALLBACK_URL = request.callBackUrl;\n    }\n    if (request.errorUrl.length !== 0) {\n        ERROR_URL = request.errorUrl;\n    }\n    var jsonData = {\n        \"InvoiceValue\": request.invoiceValue,\n        \"NotificationOption\": request.notificationOption,\n        \"CallBackUrl\": CALLBACK_URL,\n        \"ErrorUrl\": ERROR_URL,\n        \"DisplayCurrencyIso\": request.displayCurrencyIso,\n        \"MobileCountryCode\": request.mobileCountryCode,\n        \"UserDefinedField\": request.userDefinedField,\n        \"CustomerName\": request.customerName,\n        \"CustomerCivilId\": request.customerCivilId,\n        \"CustomerReference\": request.customerReference,\n        \"CustomerMobile\": request.customerMobile,\n        \"CustomerEmail\": request.customerEmail,\n        \"Language\": request.language,\n        \"SupplierCode\": request.supplierCode,\n        \"SupplierValue\": request.supplierValue\n    };\n    if (request.expiryDate !== null) {\n        jsonData.ExpiryDate = request.expiryDate.toISOString();\n    }\n    var invoiceItems = [];\n    for (var i in request.invoiceItems) {\n        var product = request.invoiceItems[i];\n        invoiceItems.push({\n            \"ItemName\": product.name,\n            \"Quantity\": product.quantity,\n            \"UnitPrice\": product.unitPrice\n        });\n        if (invoiceItems.length !== 0) {\n            jsonData.InvoiceItems = invoiceItems;\n        }\n        var customerAddress = request.customerAddress;\n        var customerAddressData = {\n            \"Block\": customerAddress.block,\n            \"Street\": customerAddress.street,\n            \"HouseBuildingNo\": customerAddress.houseBuildingNo,\n            \"Address\": customerAddress.address,\n            \"AddressInstructions\": customerAddress.addressInstructions\n        };\n        jsonData.CustomerAddress = customerAddressData;\n    }\n    return jsonData;\n}\nexport function cardInfoJson(cardInfo, intervalDays) {\n\n    if (cardInfo.card !== undefined) {\n        let card = cardInfo.card\n        let cardParameters = {\n            \"CardHolderName\": card.cardHolderName,\n            \"Number\": card.number,\n            \"ExpiryMonth\": card.expiryMonth,\n            \"ExpiryYear\": card.expiryYear,\n            \"SecurityCode\": card.securityCode\n        }\n        var jsonData = {\n            \"PaymentType\": cardInfo.paymentType,\n            \"Card\": cardParameters,\n            \"SaveToken\": cardInfo.saveToken || false,\n            \"Bypass3DS\": cardInfo.bypass\n        }\n        if (intervalDays !== undefined) {\n            jsonData.IntervalDays = intervalDays\n            jsonData.IsRecurring = true\n        }\n        return jsonData\n    }\n    return {\n        \"PaymentType\": cardInfo.paymentType,\n        \"Token\": cardInfo.cardToken || ''\n    }\n}\n//endregion\n\n//region NETOWRK HANDLE METHOD\nexport function issueRequest(jsonData, methodName, apiLanguage, withFullPath, postExecuteCallback) {\n    var path = MFSettings.sharedInstance.getBaseURL() + methodName;\n    if (withFullPath) {\n        path = methodName\n    }\n    let newRequest = new Request(path);\n    newRequest.addHeader('Content-Type', 'application/json');\n    newRequest.addHeader('Authorization', 'Bearer ' + MFSettings.sharedInstance.getToken());\n    newRequest.addHeader('Accept-Language', apiLanguage);\n    if (jsonData !== undefined) {\n        newRequest.setJsonData(jsonData);\n    }\n\n    RNETWORK.post(newRequest, () => {\n    }, (response: Response) => {\n        postExecuteCallback(response)\n    });\n}\n//endregion\n\n//region PAYMENT HANDLE METHODS\nexport function parseDirectPaymentResponse(cardInfoResponse, response, postExecuteCallback) {\n    if (cardInfoResponse === undefined) {\n        var responseError = new Response();\n        responseError.setError('Error Message', '' + response.getBodyJson().Data.InvoiceId);\n        postExecuteCallback(responseError);\n    }\n    else {\n        var data = response.getBodyJson().Data;\n        if (data !== undefined) {\n            var directPaymentResponse = new Response();\n            var directPaymentJson = {\n                getPaymentStatusResponse: data,\n                cardInfoResponse: cardInfoResponse\n            };\n            directPaymentResponse.setBody(JSON.stringify(directPaymentJson));\n            postExecuteCallback(directPaymentResponse);\n        }\n        else {\n            var responseError = new Response();\n            responseError.setError('Error Message', 'No payment status response');\n            postExecuteCallback(responseError);\n        }\n    }\n}\nexport function parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, intervalDays) {\n    if (response.getBodyJson().Data.IsDirectPayment) {\n        if (response.getPaymentURL() !== undefined) {\n            var jsonData = cardInfoJson(cardInfo, intervalDays);\n            var method = response.getPaymentURL();\n            issueRequest(jsonData, method, apiLanguage, true, (response: Response) => {\n                var errorMessage = response.errorMessage(false, false);\n                if (errorMessage.length !== 0) {\n                    response.setError('Error Message', errorMessage);\n                    postExecuteCallback(response);\n                }\n                else {\n                    handleDirectPayment(response, navigation, cardInfo, apiLanguage, postExecuteCallback);\n                }\n            });\n        }\n        else {\n            var responseError = new Response();\n            responseError.setError('Error Message', 'There is no direct payment URL');\n            postExecuteCallback(responseError);\n        }\n    }\n    else {\n        var responseError = new Response();\n        responseError.setError('Error Message', 'Direct payment is not available for this account, please call executePayment method');\n        postExecuteCallback(responseError);\n    }\n}\nexport function handleDirectPayment(response, navigation, cardInfo, apiLanguage, postExecuteCallback) {\n    if (!cardInfo.bypass) {\n        var cardInfoResponse = response.getBodyJson().Data;\n        var url = cardInfoResponse.PaymentURL;\n        navigation.navigate('MFWebView', { link: url, apiLanguage: apiLanguage, cardInfoResponse: cardInfoResponse, postExecuteCallback: postExecuteCallback });\n    }\n    else {\n        var cardInfoResponse = response.getBodyJson().Data;\n        var paymentID = cardInfoResponse.PaymentId;\n        var paymentStatusRequest = new MFPaymentStatusRequest(paymentID, MFKeyType.PAYMENTID);\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, apiLanguage, (response: Response) => {\n            var errorMessage = response.errorMessage(false, false);\n            if (errorMessage.length !== 0) {\n                response.setError('Error Message', errorMessage);\n                postExecuteCallback(response);\n            }\n            else {\n                parseDirectPaymentResponse(cardInfoResponse, response, postExecuteCallback);\n            }\n        });\n    }\n}\n//endregion\nexport var CALLBACK_URL = 'https://myfatoorah.com/'\nexport var ERROR_URL = 'https://myfatooraherror.com/'","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { ActivityIndicator, StyleSheet, Button, TouchableOpacity, Image } from 'react-native';\nimport { MFPaymentRequest, MFPaymentStatusRequest } from './index.js';\nimport { CALLBACK_URL, ERROR_URL } from './index.js';\nimport { MFSettings, Response} from './index.js';\nimport { YellowBox } from 'react-native';\nimport {\n  issueRequest\n} from './MFPaymentRequest/MFPaymentRequest.HelperMethods.js'\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n\nexport default class MFWebView extends Component {\n  \n  \n  constructor(props) {\n    super(props);\n  }\n  componentDidUpdate(prevProps) {\n    this.myWebView.reload()\n  }\n\n  //region HELPERS METHODS\n  LoadingIndicatorView() {\n    return <ActivityIndicator color={MFSettings.sharedInstance.getTheme().navigationTintColor} size='large' style={styles.ActivityIndicatorStyle} />\n  }\n  parseURLParams(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n  //endregion\n\n  //region CALLBACKS\n  onNavigationStateChange = (navigationState) => {\n    const url = navigationState.url;\n\n    const { route } = this.props\n    const { navigation } = this.props\n    const { apiLanguage } = route.params\n    const { postExecuteCallback } = route.params\n    const { cardInfoResponse } = route.params\n\n    if (url.includes(CALLBACK_URL) || url.includes(ERROR_URL)) {\n      if (url.includes('paymentId')) {\n        issueRequest(undefined, url, apiLanguage, true, (response: Response) => {\n          // var errorMessage = response.errorMessage(false, false);\n          // alert(\"Execute callback: \" + url + \", response: \" + response.getBodyString())\n      });\n        let paymentId = this.parseURLParams('paymentId', url);\n        var paymentStatusRequest = new MFPaymentStatusRequest(paymentId, \"PaymentId\")\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, apiLanguage, (response: Response) => {\n          var errorMessage = response.errorMessage(false, false)\n          if (errorMessage.length !== 0) {\n            response.setError('Error Message', errorMessage)\n            postExecuteCallback(response);\n          } else {\n            if (cardInfoResponse !== undefined) {\n              var directPaymentResponse = new Response()\n              var directPaymentJson = {\n                getPaymentStatusResponse: response.getBodyJson().Data,\n                cardInfoResponse: cardInfoResponse\n              }\n              directPaymentResponse.setBody(JSON.stringify(directPaymentJson))\n              postExecuteCallback(directPaymentResponse)\n            } else {\n              postExecuteCallback(response)\n            }\n          }\n          navigation.goBack()\n        })\n\n      }\n    }\n  };\n  //endregion\n\n  //region navigationOptions\n  static navigationOptions = ({ navigation, route }) => {\n    return {\n      gestureEnabled: false,\n      title: MFSettings.sharedInstance.getTheme().navigationTitle,\n      headerStyle: {\n        backgroundColor: MFSettings.sharedInstance.getTheme().navigationBarTintColor,\n      },\n      headerTintColor: MFSettings.sharedInstance.getTheme().navigationTintColor,\n      headerRight: () => (\n        <TouchableOpacity onPress={()=> navigation.setParams({ refresh: 1 })}>\n          <Image style={[styles.ImageClass, {tintColor: MFSettings.sharedInstance.getTheme().navigationTintColor}]} source={require('./assets/refresh.png')} />\n        </TouchableOpacity>\n      ),\n      headerLeft: () => (\n        <Button\n          onPress={() => {\n            const { postExecuteCallback } = route.params\n            let response = new Response()\n            response.setError('Error Message', 'User clicked cancel button')\n            postExecuteCallback(response)\n            navigation.goBack()\n          }}\n          title={MFSettings.sharedInstance.getTheme().cancelButtonTitle}\n          color={MFSettings.sharedInstance.getTheme().navigationTintColor}\n        />\n      ),\n    };\n  };\n  //endregion\n  \n  \n  render() {\n    const { route } = this.props\n    const { link } = route.params\n\n    return (\n      <WebView\n        source={{ uri: link }}\n        renderLoading={this.LoadingIndicatorView}\n        startInLoadingState={true}\n        ref={(ref) => this.myWebView = ref}\n        onNavigationStateChange={this.onNavigationStateChange}\n      />\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  ActivityIndicatorStyle: {\n    flex: 1,\n    justifyContent: 'center',\n    top: 0, right: 0, left: 0, bottom: 0,\n    position: 'absolute',\n  },\n  ImageClass:\n  {\n    // Setting up image width.\n    width: 25,\n\n    // Setting up image height.\n    height: 25,\n    margin: 10\n  }\n})","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { YellowBox } from 'react-native';\nimport { MFSettings } from './MFSettings.js'\nimport { MFEnvironment } from './Enums.js';\nimport { MFPaymentRequest } from './index.js'\nimport Response from './Network/Response';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\nexport default class MFCardPaymentView extends Component {\n  constructor(props) {\n    super(props);\n}\n\n    render() {\n      const {scalesPageToFit} = Platform.OS === 'android'\n        return (\n          <WebView\n            ref={ref => (this.webview = ref)}\n            source={{ html: this.buildHtmlText(this.props.sessionId, this.props.countryCode, this.props.labels, this.props.placeholders, this.props.theme, this.props.cardHeight, this.props.borderWidth, this.props.borderRadius, this.props.fontSize) }}\n            scalesPageToFit={scalesPageToFit}\n            bounces={false}\n            scrollEnabled={false}\n            onMessage={event => {\n              let json = JSON.parse(event.nativeEvent.data)\n              if (json.sessionId != null) {\n                this.request.sessionId = json.sessionId\n                MFPaymentRequest.sharedInstance.executePayment(this.navigation, this.request, this.apiLanguage, (response) => {\n                  this.postExecuteCallback(response)\n                });\n              } else {\n                var responseError = new Response();\n                responseError.setError('Error Message', json.error);\n                this.postExecuteCallback(responseError);\n              }\n            }}\n          />\n        )\n      }\n      pay(navigation, request, apiLanguage, postExecuteCallback)  {\n        this.navigation = navigation\n        this.request = request\n        this.apiLanguage = apiLanguage\n        this.postExecuteCallback = postExecuteCallback\n        this.webview.injectJavaScript('submit()');\n      }\n\n\n      buildHtmlText(sessionId, countryCode, labels, placeholders, theme, cardHeight, borderWidth, borderRadius, fontSize) {\n        let librarySrc = \"https://demo.myfatoorah.com/cardview/v1/session.js\"\n        if (MFSettings.sharedInstance.getInvironment() == MFEnvironment.LIVE) {\n          librarySrc = \"https://portal.myfatoorah.com/cardview/v1/session.js\" \n        }\n        const HTML = `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        \n        <head>\n            <meta charset=\"UTF-8\">\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n            <meta name=\"viewport\" content=\"width=device-width,height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n            <style>body { overflow: hidden !important }</style>\n            <style>\n            *:not(input):not(textarea) {\n            -webkit-user-select: none; /* disable selection/Copy of UIWebView */\n                -webkit-touch-callout: none; /* disable the IOS popup when long-press on a link */\n                -webkit-tap-highlight-color: rgba(0,0,0,0);\n            }\n          </style>\n          </head>\n        \n        <body>\n            <script src=\"` + librarySrc +`\"></script>\n            <div style=\"width:100%\">\n                <div id=\"card-element\"></div>\n            </div>        \n            <script>\n                var config = {\n                  countryCode: \"`+countryCode+`\", // Here, add your Country Code.\n                  sessionId: \"` + sessionId + `\", // Here you add the \"SessionId\" you receive from InitiateSession Endpoint.\n                  cardViewId: \"card-element\",\n                  // The following style is optional.\n                  style: {\n                    cardHeight: `+cardHeight+`,\n                    input: {\n                      color: \"`+theme.inputColor+`\",\n                      fontSize: \"`+fontSize+`px\",\n                      fontFamily: \"sans-serif\",\n                      inputHeight: \"32px\",\n                      inputMargin: \"0px\",\n                      borderColor: \"`+theme.inputColor+`\",\n                      borderWidth: \"`+borderWidth+`px\",\n                      borderRadius: \"`+borderRadius+`px\",\n                      boxShadow: \"\",\n                      placeHolder: {\n                        holderName: \"`+placeholders.cardHolderName+`\",\n                        cardNumber: \"`+placeholders.cardNumber+`\",\n                        expiryDate: \"`+placeholders.expiryDate+`\",\n                        securityCode: \"`+placeholders.cvv+`\",\n                      }\n                    },\n                    label: {\n                      display: `+labels.showLabels+`,\n                      color: \"`+theme.labelColor+`\",\n                      fontSize: \"`+fontSize+`px\",\n                      fontFamily: \"sans-serif\",\n                      text: {\n                        holderName: \"`+labels.cardHolderName+`\",\n                        cardNumber: \"`+labels.cardNumber+`\",\n                        expiryDate: \"`+labels.expiryDate+`\",\n                        securityCode: \"`+labels.cvv+`\",\n                      },\n                    },\n                    error: {\n                      borderColor: \"`+theme.errorColor+`\",\n                      borderRadius: \"`+borderRadius+`px\",\n                      boxShadow: \"0px\",\n                    },\n                  },\n              };\n              this.myFatoorah.init(config);\n        \n              function submit() {\n                    this.myFatoorah.submit()\n                    // On success\n                    .then(function (response) {\n                      var data = {\n                        sessionId: response[\"SessionId\"],\n                        cardBrand : response[\"CardBrand\"]\n                    };\n                    let stringJSON = JSON.stringify(data, \"*\")\n                    window.ReactNativeWebView.postMessage(stringJSON);\n                    },\n                    // In case of errors\n                    function (error) {\n                      var data = {\n                        error: error\n                    };\n                    let stringJSON = JSON.stringify(data, \"*\")\n                    window.ReactNativeWebView.postMessage(stringJSON);\n                    });\n                }\n            </script>\n        \n        </body>\n        \n        </html>\n        `;     \n        return HTML\n    }\n}","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { YellowBox, View } from 'react-native';\nimport { MFPaymentRequest } from './index.js'\nimport Response from './Network/Response';\nimport {\n    executePaymentJson,\n    issueRequest,\n  } from './MFPaymentRequest/MFPaymentRequest.HelperMethods'\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\nexport default class MFInAppApplePayView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        link: ''\n      };\n}\n\n    render() {\n      const {scalesPageToFit} = Platform.OS === 'android'\n        if (this.state.link !== '') {\n            return (\n            <WebView\n                ref={ref => (this.webview = ref)}\n                source={{ uri: this.state.link }}\n                scalesPageToFit={scalesPageToFit}\n                bounces={false}\n                scrollEnabled={false}\n                enableApplePay={true}\n                onMessage={event => {\n                  alert(event.nativeEvent.data)\n                let json = JSON.parse(event.nativeEvent.data)\n                if (json.sessionId != null) {\n                    this.request.sessionId = json.sessionId\n                    this.requestExecutePayment()\n                } else {\n                    var responseError = new Response();\n                    responseError.setError('Error Message', json.error);\n                    this.postExecuteCallback(responseError);\n                }\n                }}\n            />\n            )\n        } else {\n            return <View style={{ height:60, margin: 0, marginTop: 0, flexDirection: 'column', padding: 0, justifyContent: 'space-evenly', width: '100%' }}>\n          </View>;\n        }\n\n      }\n\n      requestExecutePayment() {\n        var jsonData = executePaymentJson(this.request)\n        issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response) => {\n          var errorMessage = response.errorMessage(false, true)\n          if (errorMessage.length !== 0) {\n            response.setError(\"Error Message\", errorMessage)\n            this.postExecuteCallback(response);\n          } else {\n            const url = response.getPaymentURL()\n            const invoiceId = response.getInvoiceId()\n            this.executeCallBack(url, invoiceId)\n          }\n        })\n    }\n    executeCallBack(path, invoiceId) {\n        issueRequest(undefined, path, this.apiLanguage, true, (response) => {\n            var errorMessage = response.errorMessage(false, true)\n            if (errorMessage.length !== 0) {\n              response.setError(\"Error Message\", errorMessage)\n              postExecuteCallback(response);\n            } else {\n              this.getTransactions(invoiceId)\n            }\n        })\n    }\n    getTransactions(invoiceId) {\n        var paymentStatusRequest = new MFPaymentStatusRequest(invoiceId, \"InvoiceId\")\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, this.apiLanguage, (response) => {\n          var errorMessage = response.errorMessage(false, false)\n          if (errorMessage.length !== 0) {\n            response.setError('Error Message', errorMessage)\n            this.postExecuteCallback(response);\n          } else {\n            this.postExecuteCallback(response)\n          }\n        })\n    }\n\n      load(sessionId, countryCode, request, apiLanguage, postExecuteCallback)  {\n        this.sessionId = sessionId\n        this.countryCode = countryCode\n        this.request = request\n        this.apiLanguage = apiLanguage\n        this.postExecuteCallback = postExecuteCallback\n        let link = this.buildURL()\n        this.setState({ link: link })\n      }\n\n\n      buildURL() {\n        let link = 'https://ap.myfatoorah.com/?sessionId='+this.sessionId+'&countryCode='+this.countryCode+'&currencyCode='+this.request.displayCurrencyIso+'&amount='+this.request.invoiceValue+'&platform=react'\n        return link\n    }\n}"],"names":["Response","body","error","JSON","parse","errorMessage","stringify","getBodyJson","Data","SessionId","CountryCode","PaymentMethods","InvoiceId","PaymentURL","fromDirectPayment","fromExecute","getError","IsSuccess","IsDirectPayment","undefined","InvoiceTransactions","message","forEach","element","TransactionStatus","Error","Message","ValidationErrors","Name","MFSettings","baseURL","token","environment","charAt","length","theme","MFTheme","sharedInstance","navigationTintColor","navigationBarTintColor","navigationTitle","cancelButtonTitle","TypeCheck","obj","Object","prototype","toString","call","arr","str","value","trim","url","regx","test","Request","setUrl","headers","isString","isEmpty","isValidUrl","key","isObject","isArray","headersObj","property","stringData","type","TYPES","string","data","fromData","form","generateFormBody","formData","jsonData","json","queryParams","queryParamsMap","requestObj","formBody","encodedKey","encodeURIComponent","encodedValue","push","join","LOGGER","RNETWORK","DEBUG_ENABLED","log","request","preExecuteCallback","postExecuteCallback","getUrl","getQueryParams","response","getHeaders","then","apiResponse","setStatus","status","setHeaders","map","setBody","_bodyText","catch","setError","getData","text","MFPaymentStatusRequest","keyType","MFInitiatePayment","invoiceAmount","currencyIso","MFExecutePaymentRequest","invoiceValue","paymentMethod","callBackUrl","errorUrl","CALLBACK_URL","ERROR_URL","customerName","customerCivilId","customerReference","customerEmail","customerMobile","invoiceItems","language","expiryDate","customerAddress","MFCustomerAddress","userDefinedField","displayCurrencyIso","mobileCountryCode","supplierCode","supplierValue","suppliers","sessionId","MFProduct","name","unitPrice","quantity","MFSupplier","proposedShare","invoiceShare","block","street","houseBuildingNo","address","addressInstructions","MFCardInfo","cardNumber","cardExpiryMonth","cardExpiryYear","cardSecurityCode","cardHolderName","paymentType","saveToken","card","MFCard","bypass","number","expiryMonth","expiryYear","securityCode","MFSendPaymentRequest","notificationOption","mobileCountryIsoCode","MFLanguage","freeze","MFNotificationOption","MFPaymentype","MFMobileCountryCodeISO","MFCurrencyISO","MFKeyType","MFPaymentMethodCode","MFEnvironment","MFPaymentRequest","apiLanguage","Platform","OS","getPaymentMethods","PaymentMethodCode","APPLEPAY","dataString","response2","navigation","executePaymentJson","getPaymentURL","navigate","link","paymentStatus","cardInfo","intervalDays","recurringId","encodedRecurringId","sendPaymentJson","callerType","callerOS","isPad","sourceInfo","Version","PaymentMethodId","ExpiryDate","toISOString","i","product","supplier","InvoiceItems","Suppliers","customerAddressData","CustomerAddress","cardInfoJson","cardParameters","IntervalDays","IsRecurring","cardToken","issueRequest","methodName","withFullPath","path","getBaseURL","newRequest","addHeader","getToken","setJsonData","post","parseDirectPaymentResponse","cardInfoResponse","responseError","directPaymentResponse","directPaymentJson","method","handleDirectPayment","paymentID","PaymentId","paymentStatusRequest","PAYMENTID","getPaymentStatus","YellowBox","ignoreWarnings","MFWebView","props","onNavigationStateChange","navigationState","route","params","includes","paymentId","parseURLParams","goBack","prevProps","myWebView","reload","getTheme","styles","ActivityIndicatorStyle","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","uri","LoadingIndicatorView","ref","Component","navigationOptions","setParams","refresh","ImageClass","tintColor","require","StyleSheet","create","right","left","bottom","MFCardPaymentView","scalesPageToFit","webview","html","buildHtmlText","countryCode","labels","placeholders","cardHeight","borderWidth","borderRadius","fontSize","event","nativeEvent","executePayment","injectJavaScript","librarySrc","getInvironment","LIVE","HTML","inputColor","cvv","showLabels","labelColor","errorColor","MFInAppApplePayView","state","requestExecutePayment","height","margin","marginTop","flexDirection","padding","justifyContent","width","invoiceId","getInvoiceId","executeCallBack","getTransactions","buildURL","setState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA;sBACL;;;SACPC,IAAL,GAAY,EAAZ;SACKC,KAAL,GAAa,IAAb;;;;;4BAGMD,MAAM;WACPA,IAAL,GAAYA,IAAZ;;;;oCAGc;aACP,KAAKA,IAAZ;;;;kCAGY;aACLE,KAAKC,KAAL,CAAW,KAAKH,IAAhB,CAAP;;;;6BAGOI,cAAcH,OAAO;WACvBA,KAAL,GAAa;iBACFG,YADE;eAEJH;OAFT;;;;+BAMS;aACF,KAAKA,KAAZ;;;;+BAGS;aACFC,KAAKG,SAAL,CAAe;cACd,KAAKL,IADS;eAEb,KAAKC;OAFP,CAAP;;;;mCAKa;aACN,KAAKK,WAAL,GAAmBC,IAAnB,CAAwBC,SAA/B;;;;qCAEe;aACR,KAAKF,WAAL,GAAmBC,IAAnB,CAAwBE,WAA/B;;;;wCAEkB;aACX,KAAKH,WAAL,GAAmBC,IAAnB,CAAwBG,cAA/B;;;;mCAEa;aACN,KAAKJ,WAAL,GAAmBC,IAAnB,CAAwBI,SAA/B;;;;oCAEc;aACP,KAAKL,WAAL,GAAmBC,IAAnB,CAAwBK,UAA/B;;;;8BAEQ;aACD,KAAKN,WAAL,GAAmBC,IAA1B;;;;iCAGWM,mBAAmBC,aAAa;UACvC,KAAKb,KAAT,EAAgB;eACP,KAAKc,QAAL,GAAgBd,KAAvB;;UAEE,KAAKK,WAAL,GAAmBU,SAAvB,EAAkC;YAC5B,CAACH,iBAAL,EAAwB;cAClB,KAAKP,WAAL,GAAmBC,IAAnB,CAAwBU,eAA5B,EAA6C;mBACpC,4DAAP;;;YAGAH,WAAJ,EAAiB;cACX,KAAKR,WAAL,GAAmBC,IAAnB,CAAwBK,UAAxB,KAAuCM,SAA3C,EAAsD;mBAC7C,yBAAP;;;YAGD,KAAKZ,WAAL,GAAmBC,IAAnB,CAAwBY,mBAAxB,KAAgDD,SAAnD,EAA8D;cACxDE,UAAU,EAAd;eACKd,WAAL,GAAmBC,IAAnB,CAAwBY,mBAAxB,CAA4CE,OAA5C,CAAoD,mBAAW;gBACzDC,QAAQC,iBAAR,IAA6B,QAAjC,EAA2C;qBAClC,EAAP;aADF,MAEO,IAAID,QAAQC,iBAAR,IAA6B,QAAjC,EAA2C;wBACtCD,QAAQE,KAAlB;;WAJJ;iBAOOJ,OAAP;;eAEK,EAAP;;UAEEA,UAAU,KAAKd,WAAL,GAAmBmB,OAAnB,GAA6B,IAA3C;UACI,KAAKnB,WAAL,GAAmBoB,gBAAnB,KAAwC,IAA5C,EAAkD;aAC3CpB,WAAL,GAAmBoB,gBAAnB,CAAoCL,OAApC,CAA4C,mBAAW;oBAC3CD,UAAUE,QAAQK,IAAlB,GAAyB,IAAzB,GAAgCL,QAAQE,KAAxC,GAAgD,IAA1D;SADF;;aAIKJ,OAAP;;;;;;ICvFSQ,UAAb;;;;;;;8BAEcC,OAFd,EAEuBC,KAFvB,EAE8B;WACnBC,WAAL,GAAmBF,OAAnB;UACMA,QAAQG,MAAR,CAAeH,QAAQI,MAAR,GAAe,CAA9B,MAAqC,GAAzC,EAA8C;aACrCJ,OAAL,GAAeA,UAAU,GAAzB;OADJ,MAEO;aACEA,OAAL,GAAeA,OAAf;;WAEDC,KAAL,GAAaA,KAAb;;;;iCAGW;aACH,KAAKD,OAAL,GAAe,KAAvB;;;;+BAES;aACF,KAAKC,KAAZ;;;;6BAEOI,KAlBb,EAkBoB;WACTA,KAAL,GAAaA,KAAb;;;;+BAES;UACN,KAAKA,KAAL,KAAehB,SAAlB,EAA6B;eACpB,IAAIiB,OAAJ,CAAY,KAAZ,EAAmB,MAAnB,EAA2B,SAA3B,EAAsC,QAAtC,CAAP;;aAEK,KAAKD,KAAZ;;;;qCAEe;aACR,KAAKH,WAAZ;;;;;;AA5BOH,WACFQ,iBAAiBR,WAAWQ,cAAX,IAA6B,IAA7B,GAAoC,IAAIR,UAAJ,EAApC,GAAuDA,WAAWQ;AA+B5F,AAAO,SAASD,OAAT,CAAiBE,mBAAjB,EAAsCC,sBAAtC,EAA8DC,eAA9D,EAA+EC,iBAA/E,EAAkG;OAClGH,mBAAL,GAA2BA,mBAA3B;OACKC,sBAAL,GAA8BA,sBAA9B;OACKC,eAAL,GAAuBA,eAAvB;OACKC,iBAAL,GAAyBA,iBAAzB;;;ICrCiBC;;;;;;;6BAEHC,KAAK;aACXC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAAhD;;;;4BAGaK,KAAK;aACVJ,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BC,GAA/B,MAAwC,gBAAhD;;;;6BAGcC,KAAK;aACXL,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BE,GAA/B,MAAwC,iBAAhD;;;;4BAGaC,OAAO;aACZA,UAAU/B,SAAV,IAAuB+B,UAAU,IAAjC,IAAyCA,MAAMC,IAAN,OAAiB,EAAlE;;;;kCAGmBD,OAAO;aAClBA,UAAU/B,SAAV,IAAuB+B,UAAU,IAAzC;;;;+BAGgBE,KAAK;UACjBC,OAAO,2EAAX;aACOA,KAAKC,IAAL,CAAUF,GAAV,CAAP;;;;;;ICtBiBG;;;4BAEJ;aACN;kBACM,CADN;gBAEI,CAFJ;gBAGI;OAHX;;;;mBAOUH,GAAZ,EAAiB;;;SACVI,MAAL,CAAYJ,GAAZ;SACKK,OAAL,GAAe,EAAf;;;;;2BAGKL,KAAK;UACN,CAACV,UAAUgB,QAAV,CAAmBN,GAAnB,CAAD,IAA4BV,UAAUiB,OAAV,CAAkBP,GAAlB,CAAhC,EAAwD;cAChD,IAAI3B,KAAJ,CAAU,oBAAV,CAAN;OADF,MAEM,IAAG,CAACiB,UAAUkB,UAAV,CAAqBR,GAArB,CAAJ,EAA8B;cAC5B,IAAI3B,KAAJ,CAAU,oBAAV,CAAN;;WAEG2B,GAAL,GAAWA,GAAX;;;;6BAGO;aACA,KAAKA,GAAZ;;;;8BAGQS,KAAKX,OAAO;UAChBR,UAAUoB,QAAV,CAAmBD,GAAnB,KAA2BnB,UAAUqB,OAAV,CAAkBF,GAAlB,CAA/B,EAAuD;cAC/C,IAAIpC,KAAJ,CAAU,yBAAV,CAAN;;UAEEiB,UAAUoB,QAAV,CAAmBZ,KAAnB,KAA6BR,UAAUqB,OAAV,CAAkBb,KAAlB,CAAjC,EAA2D;cACnD,IAAIzB,KAAJ,CAAU,2BAAV,CAAN;;WAEGgC,OAAL,CAAaI,GAAb,IAAoBX,KAApB;;;;+BAGSc,YAAY;UACjB,CAACtB,UAAUoB,QAAV,CAAmBE,UAAnB,CAAL,EAAqC;cAC7B,IAAIvC,KAAJ,CAAU,4BAAV,CAAN;;WAEG,IAAIwC,QAAT,IAAqBD,UAArB,EAAiC;aAC1BP,OAAL,CAAaQ,QAAb,IAAyBD,WAAWC,QAAX,CAAzB;;;;;iCAIS;aACJ,KAAKR,OAAZ;;;;kCAGYS,YAAY;UACpBxB,UAAUoB,QAAV,CAAmBI,UAAnB,KAAkCxB,UAAUqB,OAAV,CAAkBG,UAAlB,CAAtC,EAAqE;cAC7D,IAAIzC,KAAJ,CAAU,qBAAV,CAAN;;WAEGyC,UAAL,GAAkBA,UAAlB;WACKC,IAAL,GAAYZ,QAAQa,KAAR,GAAgBC,MAA5B;WACKC,IAAL,GAAYJ,UAAZ;;;;oCAGc;aACP,KAAKA,UAAZ;;;;gCAGUK,UAAU;UAChB7B,UAAUoB,QAAV,CAAmBS,QAAnB,CAAJ,EAAkC;aAC3BA,QAAL,GAAgBA,QAAhB;aACKJ,IAAL,GAAYZ,QAAQa,KAAR,GAAgBI,IAA5B;aACKF,IAAL,GAAYf,QAAQkB,gBAAR,CAAyB,KAAKC,QAA9B,CAAZ;OAHF,MAIK;cACG,IAAIjD,KAAJ,CAAU,0BAAV,CAAN;;;;;kCAIU;aACL,KAAK8C,QAAZ;;;;gCAGUI,UAAU;UAChBjC,UAAUoB,QAAV,CAAmBa,QAAnB,KAAgCjC,UAAUqB,OAAV,CAAkBY,QAAlB,CAApC,EAAiE;aAC1DA,QAAL,GAAgBA,QAAhB;aACKR,IAAL,GAAYZ,QAAQa,KAAR,GAAgBQ,IAA5B;aACKN,IAAL,GAAYnE,KAAKG,SAAL,CAAe,KAAKqE,QAApB,CAAZ;OAHF,MAIK;cACG,IAAIlD,KAAJ,CAAU,mBAAV,CAAN;;;;;kCAGU;aACL,KAAKkD,QAAZ;;;;8BAGQ;aACD,KAAKL,IAAZ;;;;8BAGQ;aACD,KAAKH,IAAZ;;;;mCAcaU,aAAa;UACtBnC,UAAUoB,QAAV,CAAmBe,WAAnB,CAAJ,EAAqC;aAC9BC,cAAL,GAAsBD,WAAtB;aACKA,WAAL,GAAmB,MAAMtB,QAAQkB,gBAAR,CAAyBI,WAAzB,CAAzB;OAFF,MAGK;cACG,IAAIpD,KAAJ,CAAU,sBAAV,CAAN;;;;;qCAIa;aACR,KAAKoD,WAAZ;;;;wCAGkB;aACX,KAAKC,cAAZ;;;;qCAzBsBC,YAAY;UAC9BC,WAAW,EAAf;WACK,IAAIf,QAAT,IAAqBc,UAArB,EAAiC;YAC3BE,aAAaC,mBAAmBjB,QAAnB,CAAjB;YACIkB,eAAeD,mBAAmBH,WAAWd,QAAX,CAAnB,CAAnB;iBACSmB,IAAT,CAAcH,aAAa,GAAb,GAAmBE,YAAjC;;iBAESH,SAASK,IAAT,CAAc,GAAd,CAAX;aACOL,QAAP;;;;;;IC3GiBM;;;;;;;wBAERjE,SAASnB,OAAM;UACrBqF,SAASC,aAAT,IAA0B,IAA7B,EAAkC;YAC7BtF,KAAH,EAAS;kBACCuF,GAAR,CAAYpE,OAAZ,EAAqBnB,KAArB;SADF,MAEK;kBACKuF,GAAR,CAAYpE,OAAZ;;;;;;;;ICJakE;;;;;;;2BAIRG,SAAkBC,oBAAoBC,qBAAqB;UAChED,kBAAJ,EAAwB;;;UAGpBvC,MAAMsC,QAAQG,MAAR,EAAV;UACI,CAACnD,UAAUiB,OAAV,CAAkB+B,QAAQI,cAAR,EAAlB,CAAL,EAAkD;cAC1C1C,MAAMsC,QAAQI,cAAR,EAAZ;;UAEEC,WAAW,IAAI/F,QAAJ,EAAf;UACI;cACIoD,GAAN,EAAW;kBACD,KADC;mBAEAsC,QAAQM,UAAR;SAFX,EAGGC,IAHH,CAGQ,UAACC,WAAD,EAAiB;iBAChBT,GAAP,CAAW,YAAYrC,GAAZ,GAAkB,iBAAlB,GAAsCjD,KAAKG,SAAL,CAAe4F,WAAf,CAAjD;mBACSC,SAAT,CAAmBD,YAAYE,MAA/B;mBACSC,UAAT,CAAoBH,YAAYzC,OAAZ,CAAoB6C,GAAxC;mBACS9C,MAAT,CAAgB0C,YAAY9C,GAA5B;mBACSmD,OAAT,CAAiBL,YAAYM,SAA7B;8BACoBT,QAApB;SATF,EAUGU,KAVH,CAUS,UAACvG,KAAD,EAAW;iBACXuF,GAAP,CAAW,OAAX,EAAoBvF,KAApB;mBACSwG,QAAT,CAAkB,2BAAlB,EAA+CxG,KAA/C;8BACoB6F,QAApB;SAbF;OADF,CAgBE,OAAO7F,KAAP,EAAc;eACPuF,GAAP,CAAW,OAAX,EAAoBvF,KAApB;iBACSwG,QAAT,CAAkB,mDAAlB,EAAuExG,KAAvE;4BACoB6F,QAApB;;;;;yBAIQL,SAAkBC,oBAAoBC,qBAAqB;UACjED,kBAAJ,EAAwB;;;UAGpBvC,MAAMsC,QAAQG,MAAR,EAAV;UACI,CAACnD,UAAUiB,OAAV,CAAkB+B,QAAQI,cAAR,EAAlB,CAAL,EAAkD;cAC1C1C,MAAMsC,QAAQI,cAAR,EAAZ;;UAEEC,WAAW,IAAI/F,QAAJ,EAAf;UACI;cACIoD,GAAN,EAAW;kBACD,MADC;mBAEAsC,QAAQM,UAAR,EAFA;gBAGHN,QAAQiB,OAAR;SAHR,EAKGV,IALH,CAKQ,oBAAY;iBACTF,SAASa,IAAT,EAAP;SANJ,EAQGX,IARH,CAQQ,UAACC,WAAD,EAAiB;iBACdT,GAAP,CAAW,YAAYrC,GAAZ,GAAkB,iBAAlB,GAAsCjD,KAAKG,SAAL,CAAe4F,WAAf,CAAjD;mBACSK,OAAT,CAAiBL,WAAjB;;8BAEoBH,QAApB;SAZJ,EAaKU,KAbL,CAaW,UAACvG,KAAD,EAAW;iBACXuF,GAAP,CAAW,OAAX,EAAoBvF,KAApB;mBACSwG,QAAT,CAAkB,2BAAlB,EAA+CxG,KAA/C;8BACoB6F,QAApB;SAhBJ;OADF,CAmBE,OAAO7F,KAAP,EAAc;eACPuF,GAAP,CAAW,OAAX,EAAoBvF,KAApB;iBACSwG,QAAT,CAAkB,mDAAlB,EAAuExG,KAAvE;4BACoB6F,QAApB;;;;;;;AAnEeR,SAEZC,gBAAgB;;ACLlB,SAASqB,yBAAT,CAAgChD,GAAhC,EAAqCiD,OAArC,EAA8C;OAC9CjD,GAAL,GAAWA,GAAX;OACKiD,OAAL,GAAeA,OAAf;;;AAGF,AAAO,SAASC,oBAAT,CAA2BC,aAA3B,EAA0CC,WAA1C,EAAuD;OACvDD,aAAL,GAAqBA,aAArB;OACKC,WAAL,GAAmBA,WAAnB;;AAEF,AAAO,SAASC,0BAAT,CAAiCC,YAAjC,EAA+CC,aAA/C,EAA8DC,WAA9D,EAA2EC,QAA3E,EAAqF;OACrFH,YAAL,GAAoBA,YAApB;MACIC,kBAAkBjG,SAAtB,EAAiC;SAC1BiG,aAAL,GAAqB,EAArB;GADF,MAEO;SACDA,aAAL,GAAqBA,aAArB;;MAEGC,gBAAgBlG,SAApB,EAA+B;SACxBkG,WAAL,GAAmBE,YAAnB;GADF,MAEO;SACAF,WAAL,GAAmBA,WAAnB;;MAEEC,aAAanG,SAAjB,EAA4B;SACrBmG,QAAL,GAAgBE,SAAhB;GADF,MAEO;SACAF,QAAL,GAAgBA,QAAhB;;;OAGGG,YAAL,GAAoB,EAApB;OACKC,eAAL,GAAuB,EAAvB;OACKC,iBAAL,GAAyB,EAAzB;OACKC,aAAL,GAAqB,EAArB;OACKC,cAAL,GAAsB,EAAtB;OACKC,YAAL,GAAoB,EAApB;OACKC,QAAL,GAAgB,IAAhB;OACKC,UAAL,GAAkB,IAAlB;OACKC,eAAL,GAAuB,IAAIC,oBAAJ,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,CAAvB;OACKC,gBAAL,GAAwB,EAAxB;OACKC,kBAAL,GAA0B,EAA1B;OACKC,iBAAL,GAAyB,EAAzB;OACKC,YAAL,GAAoB,CAApB;OACKC,aAAL,GAAqB,CAArB;OACKC,SAAL,GAAiB,EAAjB;OACKC,SAAL,GAAiB,EAAjB;;;AAGF,AAAO,SAASC,YAAT,CAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,QAApC,EAA8C;OAC9CF,IAAL,GAAYA,IAAZ;OACKC,SAAL,GAAiBA,SAAjB;OACKC,QAAL,GAAgBA,QAAhB;;;AAGF,AAAO,SAASC,aAAT,CAAoBR,YAApB,EAAkCS,aAAlC,EAAiDC,YAAjD,EAA+D;OAC/DV,YAAL,GAAoBA,YAApB;OACKS,aAAL,GAAqBA,aAArB;OACKC,YAAL,GAAoBA,YAApB;;;AAGF,AAAO,SAASd,oBAAT,CAA2Be,KAA3B,EAAkCC,MAAlC,EAA0CC,eAA1C,EAA2DC,OAA3D,EAAoEC,mBAApE,EAAyF;OACzFJ,KAAL,GAAaA,KAAb;OACKC,MAAL,GAAcA,MAAd;OACKC,eAAL,GAAuBA,eAAvB;OACKC,OAAL,GAAeA,OAAf;OACKC,mBAAL,GAA2BA,mBAA3B;;;AAGF,AAAO,SAASC,aAAT,CACLC,UADK,EAELC,eAFK,EAGLC,cAHK,EAILC,gBAJK,EAKLC,cALK,EAMLC,WANK,EAOLC,SAPK,EAOe;OACfD,WAAL,GAAmBA,WAAnB;OACKE,IAAL,GAAY,IAAIC,MAAJ,CAAWR,UAAX,EAAuBC,eAAvB,EAAwCC,cAAxC,EAAwDC,gBAAxD,EAA0EC,cAA1E,CAAZ;OACKE,SAAL,GAAiBA,SAAjB;OACKG,MAAL,GAAc,IAAd;;;AAGF,SAASD,MAAT,CAAgBE,MAAhB,EAAwBC,WAAxB,EAAqCC,UAArC,EAAiDC,YAAjD,EAA+DT,cAA/D,EAA+E;OACxEM,MAAL,GAAcA,MAAd;OACKC,WAAL,GAAmBA,WAAnB;OACKC,UAAL,GAAkBA,UAAlB;OACKC,YAAL,GAAoBA,YAApB;OACKT,cAAL,GAAsBA,cAAtB;;;AAGF,AAAO,SAASU,uBAAT,CAA8BlD,YAA9B,EAA4CmD,kBAA5C,EAAgE7C,YAAhE,EAA8E;OAC9EN,YAAL,GAAoBA,YAApB;OACKM,YAAL,GAAoBA,YAApB;OACK6C,kBAAL,GAA0BA,kBAA1B;OACKC,oBAAL,GAA4B,MAA5B;OACKnC,kBAAL,GAA0B,KAA1B;OACKV,eAAL,GAAuB,EAAvB;OACKC,iBAAL,GAAyB,EAAzB;OACKC,aAAL,GAAqB,EAArB;OACKC,cAAL,GAAsB,EAAtB;OACKC,YAAL,GAAoB,EAApB;OACKC,QAAL,GAAgB,IAAhB;OACKC,UAAL,GAAkB,IAAlB;OACKV,QAAL,GAAgB,EAAhB;OACKW,eAAL,GAAuB,IAAIC,oBAAJ,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,CAAvB;OACKb,WAAL,GAAmB,EAAnB;OACKc,gBAAL,GAAwB,EAAxB;OACKG,YAAL,GAAoB,CAApB;OACKC,aAAL,GAAqB,CAArB;;;IC1GWiC,aAAa5H,OAAO6H,MAAP,CAAc;YAC5B,IAD4B;aAE3B;CAFa,CAAnB;;AAKP,IAAaC,uBAAuB9H,OAAO6H,MAAP,CAAc;SACzC,KADyC;WAEvC,KAFuC;SAGzC,KAHyC;UAIxC;CAJ0B,CAA7B;;AAOP,IAAaE,eAAe/H,OAAO6H,MAAP,CAAc;UAChC,MADgC;WAE/B;CAFiB,CAArB;;AAKP,IAAaG,yBAAyBhI,OAAO6H,MAAP,CAAc;YACxC,MADwC;iBAEnC,MAFmC;aAGvC,MAHuC;SAI3C,MAJ2C;WAKzC,MALyC;UAM1C,MAN0C;YAOxC;CAP0B,CAA/B;;AAUP,IAAaI,gBAAgBjI,OAAO6H,MAAP,CAAc;gBAC3B,KAD2B;qBAEtB,KAFsB;iBAG1B,KAH0B;aAI9B,KAJ8B;eAK5B,KAL4B;cAM7B,KAN6B;gBAO3B,KAP2B;sBAQrB,KARqB;cAS7B;CATe,CAAtB;;AAYP,IAAaK,YAAYlI,OAAO6H,MAAP,CAAc;eACxB,WADwB;eAExB;CAFU,CAAlB;;AAKP,AAAO,IAAMM,sBAAsBnI,OAAO6H,MAAP,CAAc;UACvC,IADuC;WAEtC,GAFsC;aAGpC,GAHoC;mBAI9B,OAJ8B;qBAK5B,IAL4B;UAMvC,IANuC;WAOtC,IAPsC;UAQvC,IARuC;cASnC,IATmC;SAUxC,IAVwC;gBAWjC,IAXiC;YAYrC;CAZuB,CAA5B;AAcP,IAAaO,gBAAgBpI,OAAO6H,MAAP,CAAc;UACjC,gCADiC;UAEjC;CAFmB,CAAtB;;AC1CP;;;;;IAIqBQ;;;;;;;;;;;;;;;oCAaHvF,SAA4BwF,aAAatF,qBAAqB;UACxEjB,WAAW;yBACIe,QAAQsB,aADZ;uBAEEtB,QAAQuB;OAFzB;mBAIatC,QAAb,EAAuB,iBAAvB,EAA0CuG,WAA1C,EAAuD,KAAvD,EAA8D,UAACnF,QAAD,EAAwB;YAChF1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;cACDoF,WAASC,EAAT,KAAgB,KAApB,EAA2B;gCACLrF,QAApB;WADF,MAEO;gBACDA,SAASsF,iBAAT,OAAiC,IAArC,EAA2C;kBACrC/G,OAAO,EAAC3D,gBAAe,EAAhB,EAAX;uBACS0K,iBAAT,GAA6B/J,OAA7B,CAAqC,mBAAW;oBAC1CC,QAAQ+J,iBAAR,KAA8BP,oBAAoBQ,QAAtD,EAAgE;uBACzD5K,cAAL,CAAoByE,IAApB,CAAyB7D,OAAzB;;eAFJ;kBAKIiK,aAAarL,KAAKG,SAAL,CAAegE,IAAf,CAAjB;kBACIrE,OAAO,kBAAiB8F,SAASxF,WAAT,GAAuBU,SAAxC,GAAoD,cAApD,GAAqE8E,SAASxF,WAAT,GAAuBmB,OAA5F,GAAsG,uBAAtG,GAA+HqE,SAASxF,WAAT,GAAuBoB,gBAAtJ,GAAyK,UAAzK,GAAsL6J,UAAtL,GAAmM,GAA9M;kBACIC,YAAY,IAAIzL,QAAJ,EAAhB;wBACUuG,OAAV,CAAkBtG,IAAlB;kCACoBwL,SAApB;aAXF,MAYO;kCACe1F,QAApB;;;;OAtBR;;;;;;;;;;;;;;;;oCAkCemF,aAAatF,qBAAqB;mBACpCzE,SAAb,EAAwB,iBAAxB,EAA2C+J,WAA3C,EAAwD,KAAxD,EAA+D,UAACnF,QAAD,EAAwB;YACjF1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;8BACiBA,QAApB;;OANN;;;;;;;;;;;;;;mCAmBa2F,YAAYhG,SAAkCwF,aAAatF,qBAAqB;;UAEzFjB,WAAWgH,mBAAmBjG,OAAnB,CAAf;;mBAEaf,QAAb,EAAuB,gBAAvB,EAAyCuG,WAAzC,EAAsD,KAAtD,EAA6D,UAACnF,QAAD,EAAwB;YAC/E1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,IAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;cACC3C,MAAM2C,SAAS6F,aAAT,EAAZ;qBACWC,QAAX,CAAoB,WAApB,EAAiC,EAAEC,MAAM1I,GAAR,EAAa8H,aAAaA,WAA1B,EAAuCtF,qBAAqBA,mBAA5D,EAAjC;;OAPJ;;;;;;;;;;;qCAiBgBmG,eAAuCb,aAAatF,qBAAqB;UACrFjB,WAAW;eACNoH,cAAclI,GADR;mBAEFkI,cAAcjF;OAF3B;;mBAKanC,QAAb,EAAuB,kBAAvB,EAA2CuG,WAA3C,EAAwD,KAAxD,EAA+D,UAACnF,QAAD,EAAwB;YACjF1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;8BACeA,QAApB;;OANJ;;;;;;;;;;;;;;;4CAoBsB2F,YAAYhG,SAAkCsG,UAAsBC,cAAcf,aAAatF,qBAAqB;UACtIjB,WAAWgH,mBAAmBjG,OAAnB,CAAf;mBACaf,QAAb,EAAuB,gBAAvB,EAAyCuG,WAAzC,EAAsD,KAAtD,EAA6D,UAACnF,QAAD,EAAwB;YAC/E1F,eAAe0F,SAAS1F,YAAT,CAAsB,IAAtB,EAA4B,IAA5B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;gBACCA,QAAN,EAAgBmF,WAAhB,EAA6BtF,mBAA7B,EAAkD8F,UAAlD,EAA8DM,QAA9D,EAAwEC,YAAxE;;OANJ;;;;;;;;;;;;;;yCAmBmBP,YAAYhG,SAAkCsG,UAAsBd,aAAatF,qBAAqB;UACrHjB,WAAWgH,mBAAmBjG,OAAnB,CAAf;mBACaf,QAAb,EAAuB,gBAAvB,EAAyCuG,WAAzC,EAAsD,KAAtD,EAA6D,UAACnF,QAAD,EAAwB;YAC/E1F,eAAe0F,SAAS1F,YAAT,CAAsB,IAAtB,EAA4B,IAA5B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;gBACCA,QAAN,EAAgBmF,WAAhB,EAA6BtF,mBAA7B,EAAkD8F,UAAlD,EAA8DM,QAA9D,EAAwE7K,SAAxE;;OANJ;;;;;;;;;;;;2CAiBqB+K,aAAqBhB,aAAatF,qBAAqB;UACxEuG,qBAAqBjH,mBAAmBgH,WAAnB,CAAzB;mBACa/K,SAAb,EAAwB,wCAAwCgL,kBAAhE,EAAoFjB,WAApF,EAAiG,KAAjG,EAAwG,UAACnF,QAAD,EAAwB;YAC1H1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;8BACeA,QAApB;;OANJ;;;;;;;;;;;;gCAiBUL,SAA+BwF,aAAatF,qBAAqB;UACvEjB,WAAWyH,gBAAgB1G,OAAhB,CAAf;;mBAEaf,QAAb,EAAuB,aAAvB,EAAsCuG,WAAtC,EAAmD,KAAnD,EAA0D,UAACnF,QAAD,EAAwB;YAC5E1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;8BACeA,QAApB;;OANJ;;;;;;AArLiBkF,iBAKZ5I,iBAAiB4I,iBAAiB5I,cAAjB,IAAmC,IAAnC,GAA0C,IAAI4I,gBAAJ,EAA1C,GAAmEA,iBAAiB5I;;AClB9G;AACA,AAAO,SAASsJ,kBAAT,CAA4BjG,OAA5B,EAAqC;QACpCA,QAAQ2B,WAAR,CAAoBnF,MAApB,KAA+B,CAAnC,EAAsC;uBACnBwD,QAAQ2B,WAAvB;;QAEA3B,QAAQ4B,QAAR,CAAiBpF,MAAjB,KAA4B,CAAhC,EAAmC;oBACnBwD,QAAQ4B,QAApB;;;QAGA+E,aAAa,SAAjB;QACIC,WAAW,SAAf;QACInB,WAASC,EAAT,KAAgB,KAApB,EAA2B;mBACZ,KAAX;YACGD,WAASoB,KAAZ,EAAmB;yBACF,MAAb;SADJ,MAEO;yBACU,OAAb;;;QAGJC,aAAeH,aAAa,GAAb,GAAmBC,QAAnB,GAA8B,GAA9B,GAAoCnB,WAASsB,OAA7C,GAAuD,uBAA1E;QACI9H,WAAW;wBACKe,QAAQyB,YADb;uBAEII,YAFJ;oBAGCC,SAHD;8BAIW9B,QAAQ0C,kBAJnB;6BAKU1C,QAAQ2C,iBALlB;4BAMS3C,QAAQyC,gBANjB;wBAOKzC,QAAQ+B,YAPb;2BAQQ/B,QAAQgC,eARhB;6BASUhC,QAAQiC,iBATlB;0BAUOjC,QAAQmC,cAVf;yBAWMnC,QAAQkC,aAXd;oBAYClC,QAAQqC,QAZT;wBAaKrC,QAAQ4C,YAbb;yBAcM5C,QAAQ6C,aAdd;sBAeGiE;KAflB;QAiBI9G,QAAQ0B,aAAR,KAA0B,EAA9B,EAAkC;iBACrB3G,SAAT,GAAqBiF,QAAQ+C,SAA7B;KADJ,MAEO;iBACMiE,eAAT,GAA2BhH,QAAQ0B,aAAnC;;QAEA1B,QAAQsC,UAAR,KAAuB,IAA3B,EAAiC;iBACpB2E,UAAT,GAAsBjH,QAAQsC,UAAR,CAAmB4E,WAAnB,EAAtB;;QAEA9E,eAAe,EAAnB;SACK,IAAI+E,CAAT,IAAcnH,QAAQoC,YAAtB,EAAoC;YAC5BgF,UAAUpH,QAAQoC,YAAR,CAAqB+E,CAArB,CAAd;qBACazH,IAAb,CAAkB;wBACF0H,QAAQnE,IADN;wBAEFmE,QAAQjE,QAFN;yBAGDiE,QAAQlE;SAHzB;;QAMAJ,YAAY,EAAhB;SACK,IAAIqE,CAAT,IAAcnH,QAAQ8C,SAAtB,EAAiC;YACzBuE,WAAWrH,QAAQ8C,SAAR,CAAkBqE,CAAlB,CAAf;kBACUzH,IAAV,CAAe;4BACK2H,SAASzE,YADd;6BAEMyE,SAAShE,aAFf;4BAGKgE,SAAS/D;SAH7B;;QAMAlB,aAAa5F,MAAb,KAAwB,CAA5B,EAA+B;iBAClB8K,YAAT,GAAwBlF,YAAxB;;;QAGAU,UAAUtG,MAAV,KAAqB,CAAzB,EAA4B;iBACf+K,SAAT,GAAqBzE,SAArB;;QAEAP,kBAAkBvC,QAAQuC,eAA9B;QACIiF,sBAAsB;iBACbjF,gBAAgBgB,KADH;kBAEZhB,gBAAgBiB,MAFJ;2BAGHjB,gBAAgBkB,eAHb;mBAIXlB,gBAAgBmB,OAJL;+BAKCnB,gBAAgBoB;KAL3C;aAOS8D,eAAT,GAA2BD,mBAA3B;WACOvI,QAAP;;AAEJ,AAAO,SAASyH,eAAT,CAAyB1G,OAAzB,EAAkC;QACjCA,QAAQ2B,WAAR,CAAoBnF,MAApB,KAA+B,CAAnC,EAAsC;uBACnBwD,QAAQ2B,WAAvB;;QAEA3B,QAAQ4B,QAAR,CAAiBpF,MAAjB,KAA4B,CAAhC,EAAmC;oBACnBwD,QAAQ4B,QAApB;;QAEA3C,WAAW;wBACKe,QAAQyB,YADb;8BAEWzB,QAAQ4E,kBAFnB;uBAGI/C,YAHJ;oBAICC,SAJD;8BAKW9B,QAAQ0C,kBALnB;6BAMU1C,QAAQ2C,iBANlB;4BAOS3C,QAAQyC,gBAPjB;wBAQKzC,QAAQ+B,YARb;2BASQ/B,QAAQgC,eAThB;6BAUUhC,QAAQiC,iBAVlB;0BAWOjC,QAAQmC,cAXf;yBAYMnC,QAAQkC,aAZd;oBAaClC,QAAQqC,QAbT;wBAcKrC,QAAQ4C,YAdb;yBAeM5C,QAAQ6C;KAf7B;QAiBI7C,QAAQsC,UAAR,KAAuB,IAA3B,EAAiC;iBACpB2E,UAAT,GAAsBjH,QAAQsC,UAAR,CAAmB4E,WAAnB,EAAtB;;QAEA9E,eAAe,EAAnB;SACK,IAAI+E,CAAT,IAAcnH,QAAQoC,YAAtB,EAAoC;YAC5BgF,UAAUpH,QAAQoC,YAAR,CAAqB+E,CAArB,CAAd;qBACazH,IAAb,CAAkB;wBACF0H,QAAQnE,IADN;wBAEFmE,QAAQjE,QAFN;yBAGDiE,QAAQlE;SAHzB;YAKId,aAAa5F,MAAb,KAAwB,CAA5B,EAA+B;qBAClB8K,YAAT,GAAwBlF,YAAxB;;YAEAG,kBAAkBvC,QAAQuC,eAA9B;YACIiF,sBAAsB;qBACbjF,gBAAgBgB,KADH;sBAEZhB,gBAAgBiB,MAFJ;+BAGHjB,gBAAgBkB,eAHb;uBAIXlB,gBAAgBmB,OAJL;mCAKCnB,gBAAgBoB;SAL3C;iBAOS8D,eAAT,GAA2BD,mBAA3B;;WAEGvI,QAAP;;AAEJ,AAAO,SAASyI,YAAT,CAAsBpB,QAAtB,EAAgCC,YAAhC,EAA8C;;QAE7CD,SAASlC,IAAT,KAAkB3I,SAAtB,EAAiC;YACzB2I,OAAOkC,SAASlC,IAApB;YACIuD,iBAAiB;8BACCvD,KAAKH,cADN;sBAEPG,KAAKG,MAFE;2BAGFH,KAAKI,WAHH;0BAIHJ,KAAKK,UAJF;4BAKDL,KAAKM;SALzB;YAOIzF,WAAW;2BACIqH,SAASpC,WADb;oBAEHyD,cAFG;yBAGErB,SAASnC,SAAT,IAAsB,KAHxB;yBAIEmC,SAAShC;SAJ1B;YAMIiC,iBAAiB9K,SAArB,EAAgC;qBACnBmM,YAAT,GAAwBrB,YAAxB;qBACSsB,WAAT,GAAuB,IAAvB;;eAEG5I,QAAP;;WAEG;uBACYqH,SAASpC,WADrB;iBAEMoC,SAASwB,SAAT,IAAsB;KAFnC;;;;;AAQJ,AAAO,SAASC,YAAT,CAAsB9I,QAAtB,EAAgC+I,UAAhC,EAA4CxC,WAA5C,EAAyDyC,YAAzD,EAAuE/H,mBAAvE,EAA4F;QAC3FgI,OAAO/L,WAAWQ,cAAX,CAA0BwL,UAA1B,KAAyCH,UAApD;QACIC,YAAJ,EAAkB;eACPD,UAAP;;QAEAI,aAAa,IAAIvK,OAAJ,CAAYqK,IAAZ,CAAjB;eACWG,SAAX,CAAqB,cAArB,EAAqC,kBAArC;eACWA,SAAX,CAAqB,eAArB,EAAsC,YAAYlM,WAAWQ,cAAX,CAA0B2L,QAA1B,EAAlD;eACWD,SAAX,CAAqB,iBAArB,EAAwC7C,WAAxC;QACIvG,aAAaxD,SAAjB,EAA4B;mBACb8M,WAAX,CAAuBtJ,QAAvB;;;aAGKuJ,IAAT,CAAcJ,UAAd,EAA0B,YAAM,EAAhC,EACG,UAAC/H,QAAD,EAAwB;4BACHA,QAApB;KAFJ;;;;;AAQJ,AAAO,SAASoI,0BAAT,CAAoCC,gBAApC,EAAsDrI,QAAtD,EAAgEH,mBAAhE,EAAqF;QACpFwI,qBAAqBjN,SAAzB,EAAoC;YAC5BkN,gBAAgB,IAAIrO,QAAJ,EAApB;sBACc0G,QAAd,CAAuB,eAAvB,EAAwC,KAAKX,SAASxF,WAAT,GAAuBC,IAAvB,CAA4BI,SAAzE;4BACoByN,aAApB;KAHJ,MAKK;YACG/J,OAAOyB,SAASxF,WAAT,GAAuBC,IAAlC;YACI8D,SAASnD,SAAb,EAAwB;gBAChBmN,wBAAwB,IAAItO,QAAJ,EAA5B;gBACIuO,oBAAoB;0CACMjK,IADN;kCAEF8J;aAFtB;kCAIsB7H,OAAtB,CAA8BpG,KAAKG,SAAL,CAAeiO,iBAAf,CAA9B;gCACoBD,qBAApB;SAPJ,MASK;gBACGD,gBAAgB,IAAIrO,QAAJ,EAApB;0BACc0G,QAAd,CAAuB,eAAvB,EAAwC,4BAAxC;gCACoB2H,aAApB;;;;AAIZ,AAAO,SAASjO,KAAT,CAAe2F,QAAf,EAAyBmF,WAAzB,EAAsCtF,mBAAtC,EAA2D8F,UAA3D,EAAuEM,QAAvE,EAAiFC,YAAjF,EAA+F;QAC9FlG,SAASxF,WAAT,GAAuBC,IAAvB,CAA4BU,eAAhC,EAAiD;YACzC6E,SAAS6F,aAAT,OAA6BzK,SAAjC,EAA4C;gBACpCwD,WAAWyI,aAAapB,QAAb,EAAuBC,YAAvB,CAAf;gBACIuC,SAASzI,SAAS6F,aAAT,EAAb;yBACajH,QAAb,EAAuB6J,MAAvB,EAA+BtD,WAA/B,EAA4C,IAA5C,EAAkD,UAACnF,QAAD,EAAwB;oBAClE1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;oBACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;6BAClBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;wCACoB0F,QAApB;iBAFJ,MAIK;wCACmBA,QAApB,EAA8B2F,UAA9B,EAA0CM,QAA1C,EAAoDd,WAApD,EAAiEtF,mBAAjE;;aAPR;SAHJ,MAcK;gBACGyI,gBAAgB,IAAIrO,QAAJ,EAApB;0BACc0G,QAAd,CAAuB,eAAvB,EAAwC,gCAAxC;gCACoB2H,aAApB;;KAlBR,MAqBK;YACGA,gBAAgB,IAAIrO,QAAJ,EAApB;sBACc0G,QAAd,CAAuB,eAAvB,EAAwC,qFAAxC;4BACoB2H,aAApB;;;AAGR,AAAO,SAASI,mBAAT,CAA6B1I,QAA7B,EAAuC2F,UAAvC,EAAmDM,QAAnD,EAA6Dd,WAA7D,EAA0EtF,mBAA1E,EAA+F;QAC9F,CAACoG,SAAShC,MAAd,EAAsB;YACdoE,mBAAmBrI,SAASxF,WAAT,GAAuBC,IAA9C;YACI4C,MAAMgL,iBAAiBvN,UAA3B;mBACWgL,QAAX,CAAoB,WAApB,EAAiC,EAAEC,MAAM1I,GAAR,EAAa8H,aAAaA,WAA1B,EAAuCkD,kBAAkBA,gBAAzD,EAA2ExI,qBAAqBA,mBAAhG,EAAjC;KAHJ,MAKK;YACGwI,mBAAmBrI,SAASxF,WAAT,GAAuBC,IAA9C;YACIkO,YAAYN,iBAAiBO,SAAjC;YACIC,uBAAuB,IAAI/H,yBAAJ,CAA2B6H,SAA3B,EAAsC5D,UAAU+D,SAAhD,CAA3B;yBACiBxM,cAAjB,CAAgCyM,gBAAhC,CAAiDF,oBAAjD,EAAuE1D,WAAvE,EAAoF,UAACnF,QAAD,EAAwB;gBACpG1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;gBACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;yBAClBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;oCACoB0F,QAApB;aAFJ,MAIK;2CAC0BqI,gBAA3B,EAA6CrI,QAA7C,EAAuDH,mBAAvD;;SAPR;;;;AAaR,IAAW2B,eAAe,yBAAnB;AACP,IAAWC,YAAY,8BAAhB;;ACjQPuH,UAAUC,cAAV,CAAyB,CACvB,4DADuB,CAAzB;;IAIqBC;;;wBAGPC,KAAZ,EAAmB;;;2HACXA,KADW;;UAuBnBC,uBAvBmB,GAuBO,UAACC,eAAD,EAAqB;UACvChM,MAAMgM,gBAAgBhM,GAA5B;;UAEQiM,KAHqC,GAG3B,MAAKH,KAHsB,CAGrCG,KAHqC;UAIrC3D,UAJqC,GAItB,MAAKwD,KAJiB,CAIrCxD,UAJqC;UAKrCR,WALqC,GAKrBmE,MAAMC,MALe,CAKrCpE,WALqC;UAMrCtF,mBANqC,GAMbyJ,MAAMC,MANO,CAMrC1J,mBANqC;UAOrCwI,gBAPqC,GAOhBiB,MAAMC,MAPU,CAOrClB,gBAPqC;;;UASzChL,IAAImM,QAAJ,CAAahI,YAAb,KAA8BnE,IAAImM,QAAJ,CAAa/H,SAAb,CAAlC,EAA2D;YACrDpE,IAAImM,QAAJ,CAAa,WAAb,CAAJ,EAA+B;uBAChBpO,SAAb,EAAwBiC,GAAxB,EAA6B8H,WAA7B,EAA0C,IAA1C,EAAgD,UAACnF,QAAD,EAAwB;;;WAAxE;cAIIyJ,YAAY,MAAKC,cAAL,CAAoB,WAApB,EAAiCrM,GAAjC,CAAhB;cACIwL,uBAAuB,IAAI/H,yBAAJ,CAA2B2I,SAA3B,EAAsC,WAAtC,CAA3B;2BACiBnN,cAAjB,CAAgCyM,gBAAhC,CAAiDF,oBAAjD,EAAuE1D,WAAvE,EAAoF,UAACnF,QAAD,EAAwB;gBACtG1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;gBACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;uBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;kCACoB0F,QAApB;aAFF,MAGO;kBACDqI,qBAAqBjN,SAAzB,EAAoC;oBAC9BmN,wBAAwB,IAAItO,QAAJ,EAA5B;oBACIuO,oBAAoB;4CACIxI,SAASxF,WAAT,GAAuBC,IAD3B;oCAEJ4N;iBAFpB;sCAIsB7H,OAAtB,CAA8BpG,KAAKG,SAAL,CAAeiO,iBAAf,CAA9B;oCACoBD,qBAApB;eAPF,MAQO;oCACevI,QAApB;;;uBAGO2J,MAAX;WAlBF;;;KAxCa;;;;;;;uCAGAC,WAAW;WACvBC,SAAL,CAAeC,MAAf;;;;;;;2CAIqB;aACd,oBAAC,iBAAD,IAAmB,OAAOhO,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCxN,mBAA/D,EAAoF,MAAK,OAAzF,EAAiG,OAAOyN,OAAOC,sBAA/G,GAAP;;;;mCAEarH,MAAMvF,KAAK;UACpB,CAACA,GAAL,EAAUA,MAAM6M,OAAOC,QAAP,CAAgBC,IAAtB;aACHxH,KAAKyH,OAAL,CAAa,SAAb,EAAwB,MAAxB,CAAP;UACIC,QAAQ,IAAIC,MAAJ,CAAW,SAAS3H,IAAT,GAAgB,mBAA3B,CAAZ;UACE4H,UAAUF,MAAMG,IAAN,CAAWpN,GAAX,CADZ;UAEI,CAACmN,OAAL,EAAc,OAAO,IAAP;UACV,CAACA,QAAQ,CAAR,CAAL,EAAiB,OAAO,EAAP;aACVE,mBAAmBF,QAAQ,CAAR,EAAWH,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAnB,CAAP;;;;;;;;;;;;;;;;6BAgFO;;;UACCf,KADD,GACW,KAAKH,KADhB,CACCG,KADD;UAECvD,IAFD,GAEUuD,MAAMC,MAFhB,CAECxD,IAFD;;;aAKL,oBAAC,OAAD;gBACU,EAAE4E,KAAK5E,IAAP,EADV;uBAEiB,KAAK6E,oBAFtB;6BAGuB,IAHvB;aAIO,aAACC,IAAD;iBAAS,OAAKhB,SAAL,GAAiBgB,IAA1B;SAJP;iCAK2B,KAAKzB;QANlC;;;;EAzGmC0B;;AAAlB5B,aAsEZ6B,oBAAoB,iBAA2B;MAAxBpF,UAAwB,SAAxBA,UAAwB;MAAZ2D,KAAY,SAAZA,KAAY;;SAC7C;oBACW,KADX;WAEExN,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCtN,eAFvC;iBAGQ;uBACMX,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCvN;KAJnD;qBAMYV,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCxN,mBANjD;iBAOQ;aACX;wBAAA;UAAkB,SAAS;mBAAKoJ,WAAWqF,SAAX,CAAqB,EAAEC,SAAS,CAAX,EAArB,CAAL;WAA3B;4BACG,KAAD,IAAO,OAAO,CAACjB,OAAOkB,UAAR,EAAoB,EAACC,WAAWrP,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCxN,mBAAjD,EAApB,CAAd,EAA0G,QAAQ6O,QAAQ,sBAAR,CAAlH;OAFS;KAPR;gBAYO;aACV,oBAAC,MAAD;iBACW,mBAAM;cACLvL,mBADK,GACmByJ,MAAMC,MADzB,CACL1J,mBADK;;cAETG,WAAW,IAAI/F,QAAJ,EAAf;mBACS0G,QAAT,CAAkB,eAAlB,EAAmC,4BAAnC;8BACoBX,QAApB;qBACW2J,MAAX;SANJ;eAQS7N,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCrN,iBAR9C;eASSZ,WAAWQ,cAAX,CAA0ByN,QAA1B,GAAqCxN;QAVpC;;GAZd;;;;AA8CJ,IAAMyN,SAASqB,WAAWC,MAAX,CAAkB;0BACP;UAChB,CADgB;oBAEN,QAFM;SAGjB,CAHiB,EAGdC,OAAO,CAHO,EAGJC,MAAM,CAHF,EAGKC,QAAQ,CAHb;cAIZ;GALmB;cAQ/B;;WAES,EAFT;;;YAKU,EALV;YAMU;;CAdG,CAAf;;AC3HAzC,UAAUC,cAAV,CAAyB,CACvB,4DADuB,CAAzB;;IAGqByC;;;gCACPvC,KAAZ,EAAmB;;sIACXA,KADW;;;;;6BAIR;;;iBACmB/D,SAASC,EAAT,KAAgB,SADnC;UACAsG,eADA,QACAA,eADA;;aAGH,oBAAC,OAAD;aACO;iBAAQ,OAAKC,OAAL,GAAef,KAAvB;SADP;gBAEU,EAAEgB,MAAM,KAAKC,aAAL,CAAmB,KAAK3C,KAAL,CAAWzG,SAA9B,EAAyC,KAAKyG,KAAL,CAAW4C,WAApD,EAAiE,KAAK5C,KAAL,CAAW6C,MAA5E,EAAoF,KAAK7C,KAAL,CAAW8C,YAA/F,EAA6G,KAAK9C,KAAL,CAAW/M,KAAxH,EAA+H,KAAK+M,KAAL,CAAW+C,UAA1I,EAAsJ,KAAK/C,KAAL,CAAWgD,WAAjK,EAA8K,KAAKhD,KAAL,CAAWiD,YAAzL,EAAuM,KAAKjD,KAAL,CAAWkD,QAAlN,CAAR,EAFV;yBAGmBV,eAHnB;iBAIW,KAJX;uBAKiB,KALjB;mBAMa,0BAAS;cACd9M,OAAOzE,KAAKC,KAAL,CAAWiS,MAAMC,WAAN,CAAkBhO,IAA7B,CAAX;cACIM,KAAK6D,SAAL,IAAkB,IAAtB,EAA4B;mBACrB/C,OAAL,CAAa+C,SAAb,GAAyB7D,KAAK6D,SAA9B;6BACiBpG,cAAjB,CAAgCkQ,cAAhC,CAA+C,OAAK7G,UAApD,EAAgE,OAAKhG,OAArE,EAA8E,OAAKwF,WAAnF,EAAgG,UAACnF,QAAD,EAAc;qBACvGH,mBAAL,CAAyBG,QAAzB;aADF;WAFF,MAKO;gBACDsI,gBAAgB,IAAIrO,QAAJ,EAApB;0BACc0G,QAAd,CAAuB,eAAvB,EAAwC9B,KAAK1E,KAA7C;mBACK0F,mBAAL,CAAyByI,aAAzB;;;QAjBR;;;;wBAuBE3C,YAAYhG,SAASwF,aAAatF,qBAAsB;WACrD8F,UAAL,GAAkBA,UAAlB;WACKhG,OAAL,GAAeA,OAAf;WACKwF,WAAL,GAAmBA,WAAnB;WACKtF,mBAAL,GAA2BA,mBAA3B;WACK+L,OAAL,CAAaa,gBAAb,CAA8B,UAA9B;;;;kCAIY/J,WAAWqJ,aAAaC,QAAQC,cAAc7P,OAAO8P,YAAYC,aAAaC,cAAcC,UAAU;UAC9GK,aAAa,oDAAjB;UACI5Q,WAAWQ,cAAX,CAA0BqQ,cAA1B,MAA8C1H,cAAc2H,IAAhE,EAAsE;qBACvD,sDAAb;;UAEIC,OAAO,qyBAmBQH,UAnBR,4NAyBaX,WAzBb,0EA0BarJ,SA1Bb,yPA8BawJ,UA9Bb,uEAgCW9P,MAAM0Q,UAhCjB,6CAiCcT,QAjCd,0LAqCiBjQ,MAAM0Q,UArCvB,gDAsCiBX,WAtCjB,mDAuCkBC,YAvClB,+HA0CkBH,aAAarI,cA1C/B,iDA2CkBqI,aAAazI,UA3C/B,iDA4CkByI,aAAahK,UA5C/B,mDA6CoBgK,aAAac,GA7CjC,0HAiDYf,OAAOgB,UAjDnB,yCAkDW5Q,MAAM6Q,UAlDjB,6CAmDcZ,QAnDd,mIAsDkBL,OAAOpI,cAtDzB,iDAuDkBoI,OAAOxI,UAvDzB,iDAwDkBwI,OAAO/J,UAxDzB,mDAyDoB+J,OAAOe,GAzD3B,gIA6DiB3Q,MAAM8Q,UA7DvB,iDA8DkBd,YA9DlB,+lCAAb;aA+FOS,IAAP;;;;EA3IuC/B;;ACF/C9B,UAAUC,cAAV,CAAyB,CACvB,4DADuB,CAAzB;;IAGqBkE;;;kCACPhE,KAAZ,EAAmB;;;+IACXA,KADW;;UAEZiE,KAAL,GAAa;YACH;KADV;;;;;;6BAKS;;;iBACmBhI,SAASC,EAAT,KAAgB,SADnC;UACAsG,eADA,QACAA,eADA;;UAED,KAAKyB,KAAL,CAAWrH,IAAX,KAAoB,EAAxB,EAA4B;eAExB,oBAAC,OAAD;eACS;mBAAQ,OAAK6F,OAAL,GAAef,KAAvB;WADT;kBAEY,EAAEF,KAAK,KAAKyC,KAAL,CAAWrH,IAAlB,EAFZ;2BAGqB4F,eAHrB;mBAIa,KAJb;yBAKmB,KALnB;0BAMoB,IANpB;qBAOe,0BAAS;kBACZW,MAAMC,WAAN,CAAkBhO,IAAxB;gBACEM,OAAOzE,KAAKC,KAAL,CAAWiS,MAAMC,WAAN,CAAkBhO,IAA7B,CAAX;gBACIM,KAAK6D,SAAL,IAAkB,IAAtB,EAA4B;qBACnB/C,OAAL,CAAa+C,SAAb,GAAyB7D,KAAK6D,SAA9B;qBACK2K,qBAAL;aAFJ,MAGO;kBACC/E,gBAAgB,IAAIrO,QAAJ,EAApB;4BACc0G,QAAd,CAAuB,eAAvB,EAAwC9B,KAAK1E,KAA7C;qBACK0F,mBAAL,CAAyByI,aAAzB;;;UAjBR;OADJ,MAuBO;eACI,oBAAC,IAAD,IAAM,OAAO,EAAEgF,QAAO,EAAT,EAAaC,QAAQ,CAArB,EAAwBC,WAAW,CAAnC,EAAsCC,eAAe,QAArD,EAA+DC,SAAS,CAAxE,EAA2EC,gBAAgB,cAA3F,EAA2GC,OAAO,MAAlH,EAAb,GAAP;;;;;4CAMkB;;;UAClBhP,WAAWgH,mBAAmB,KAAKjG,OAAxB,CAAf;mBACaf,QAAb,EAAuB,gBAAvB,EAAyCuG,WAAzC,EAAsD,KAAtD,EAA6D,UAACnF,QAAD,EAAc;YACrE1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,IAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;iBACKuF,mBAAL,CAAyBG,QAAzB;SAFF,MAGO;cACC3C,MAAM2C,SAAS6F,aAAT,EAAZ;cACMgI,YAAY7N,SAAS8N,YAAT,EAAlB;iBACKC,eAAL,CAAqB1Q,GAArB,EAA0BwQ,SAA1B;;OARJ;;;;oCAYYhG,MAAMgG,WAAW;;;mBAChBzS,SAAb,EAAwByM,IAAxB,EAA8B,KAAK1C,WAAnC,EAAgD,IAAhD,EAAsD,UAACnF,QAAD,EAAc;YAC5D1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,IAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;8BACoB0F,QAApB;SAFF,MAGO;iBACAgO,eAAL,CAAqBH,SAArB;;OANN;;;;oCAUYA,WAAW;;;UACnBhF,uBAAuB,IAAI/H,sBAAJ,CAA2B+M,SAA3B,EAAsC,WAAtC,CAA3B;uBACiBvR,cAAjB,CAAgCyM,gBAAhC,CAAiDF,oBAAjD,EAAuE,KAAK1D,WAA5E,EAAyF,UAACnF,QAAD,EAAc;YACjG1F,eAAe0F,SAAS1F,YAAT,CAAsB,KAAtB,EAA6B,KAA7B,CAAnB;YACIA,aAAa6B,MAAb,KAAwB,CAA5B,EAA+B;mBACpBwE,QAAT,CAAkB,eAAlB,EAAmCrG,YAAnC;iBACKuF,mBAAL,CAAyBG,QAAzB;SAFF,MAGO;iBACAH,mBAAL,CAAyBG,QAAzB;;OANJ;;;;yBAWG0C,WAAWqJ,aAAapM,SAASwF,aAAatF,qBAAsB;WAClE6C,SAAL,GAAiBA,SAAjB;WACKqJ,WAAL,GAAmBA,WAAnB;WACKpM,OAAL,GAAeA,OAAf;WACKwF,WAAL,GAAmBA,WAAnB;WACKtF,mBAAL,GAA2BA,mBAA3B;UACIkG,OAAO,KAAKkI,QAAL,EAAX;WACKC,QAAL,CAAc,EAAEnI,MAAMA,IAAR,EAAd;;;;+BAIS;UACLA,OAAO,0CAAwC,KAAKrD,SAA7C,GAAuD,eAAvD,GAAuE,KAAKqJ,WAA5E,GAAwF,gBAAxF,GAAyG,KAAKpM,OAAL,CAAa0C,kBAAtH,GAAyI,UAAzI,GAAoJ,KAAK1C,OAAL,CAAayB,YAAjK,GAA8K,iBAAzL;aACO2E,IAAP;;;;EA3FyC+E;;;;"}