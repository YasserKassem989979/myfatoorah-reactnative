{"version":3,"file":"index.es.js","sources":["../src/Network/Response.js","../src/Enums.js","../src/Network/TypeCheck.js","../src/Network/Request.js","../src/Network/LOGGER.js","../src/Network/RNETWORK.js","../src/Models.js","../src/MFPaymentRequest/MFPaymentRequest.js","../src/MFPaymentRequest/MFPaymentRequest.HelperMethods.js","../src/MFSettings.js","../src/MFWebView.js","../src/MFCardPaymentView.js","../src/MFInAppApplePayView.js"],"sourcesContent":["export default class Response {\n  constructor() {\n    this.body = '';\n    this.error = null;\n  }\n\n  setBody(body) {\n    this.body = body;\n  }\n\n  getBodyString() {\n    return this.body;\n  }\n\n  getBodyJson() {\n    return JSON.parse(this.body);\n  }\n\n  setError(errorMessage, error) {\n    this.error = {\n      message: errorMessage,\n      error: error\n    }\n  }\n\n  getError() {\n    return this.error;\n  }\n\n  toString() {\n    return JSON.stringify({\n      body: this.body,\n      error: this.error,\n    });\n  }\n  getSessionId() {\n    return this.getBodyJson().Data.SessionId\n  }\n  getCountryCode() {\n    return this.getBodyJson().Data.CountryCode\n  }\n  getPaymentMethods() {\n    return this.getBodyJson().Data.PaymentMethods\n  }\n  getInvoiceId() {\n    return this.getBodyJson().Data.InvoiceId\n  }\n  getPaymentURL() {\n    return this.getBodyJson().Data.PaymentURL\n  }\n  getRecurringId() {\n    return this.getBodyJson().Data.RecurringId\n  }\n  getData() {\n    return this.getBodyJson().Data\n  }\n\n  errorMessage(fromDirectPayment, fromExecute) {\n    if (this.error) {\n      return this.getError().error\n    }\n    if (this.getBodyJson().IsSuccess) {\n      if (!fromDirectPayment) {\n        if (this.getBodyJson().Data.IsDirectPayment) {\n          return 'For direct payment please call executeDirectPayment method'\n        }\n      }\n      if (fromExecute) {\n        if (this.getBodyJson().Data.PaymentURL === undefined) {\n          return 'There is no payment URL'\n        }\n      }\n      if(this.getBodyJson().Data.InvoiceTransactions !== undefined) {\n        var message = ''\n        this.getBodyJson().Data.InvoiceTransactions.forEach(element => {\n          if (element.TransactionStatus == \"Succss\") {\n            return ''\n          } else if (element.TransactionStatus == \"Failed\") {\n            message = element.Error\n          }\n        })\n        return message\n      }\n      return ''\n    }\n    var message = this.getBodyJson().Message + '\\n'\n    if (this.getBodyJson().ValidationErrors !== null) {\n      this.getBodyJson().ValidationErrors.forEach(element => {\n        message = message + element.Name + ': ' + element.Error + '\\n'\n      });\n    }\n    return message\n  }\n\n}\n","\nexport const MFLanguage = Object.freeze({\n    ARABIC: 'ar',\n    ENGLISH: 'en'\n});\n\nexport const MFNotificationOption = Object.freeze({\n    ALL: 'all',\n    EMAIL: 'eml',\n    SMS: 'sms',\n    LINK: 'lnk'\n});\n\nexport const MFPaymentype = Object.freeze({\n    CARD: 'card',\n    TOKEN: 'token'\n})\n\nexport const MFMobileCountryCodeISO = Object.freeze({\n    KUWAIT: '+965',\n    SAUDIARABIA: '+966',\n    BAHRAIN: '+973',\n    UAE: '+971',\n    QATAR: '+974',\n    OMAN: '+968',\n    JORDAN: '+962',\n    EGYPT: '+20'\n});\n\nexport const MFCurrencyISO = Object.freeze({\n    KUWAIT_KWD: 'KWD',\n    SAUDIARABIA_SAR: 'SAR',\n    BAHRAIN_BHD: 'BHD',\n    UAE_AED: 'AED',\n    QATAR_QAR: 'QAR',\n    OMAN_MOR: 'OMR',\n    JORDAN_JOD: 'JOD',\n    UNITEDSTATES_USD: 'USD',\n    EURO_EUR: 'EUR'\n})\n\nexport const MFKeyType = Object.freeze({\n    INVOICEID: 'InvoiceId',\n    PAYMENTID: 'PaymentId'\n})\n\nexport const MFPaymentMethodCode = Object.freeze({\n    AMEX: \"ae\",\n    SADAD: \"s\",\n    BENEFIT: \"b\",\n    UAEDEBITCARDS: \"uaecc\",\n    QATARDEBITCARDS: \"np\",\n    MADA: \"md\",\n    KFAST: \"kf\",\n    KNET: \"kn\",\n    APPLEPAY: \"ap\",\n    AFS: \"af\",\n    VISAMASTER: \"vm\",\n    STCPAY: \"stc\"\n})\nexport const MFEnvironment = Object.freeze({\n    TEST: 'TEST',//'https://apitest.myfatoorah.com',\n    LIVE: 'LIVE'//'https://api.myfatoorah.com'\n})\n\nexport const MFCountry = Object.freeze({\n    KUWAIT: 'KWT',\n    SAUDIARABIA: 'SAU',\n    BAHRAIN: 'BHR',\n    UNITEDARABEMIRATES: 'ARE',\n    QATAR: 'QAT',\n    OMAN: 'OMN',\n    JORDAN: 'JOD',\n    EGYPT: 'EGY'\n});\nexport const MFRecurringType = Object.freeze({\n    Custom: 'Custom',\n    Daily: 'Daily',\n    Weekly: 'Weekly',\n    Monthly: 'Monthly'\n});","export default class TypeCheck{\n\n  static isObject(obj) {\n    return (Object.prototype.toString.call(obj) === '[object Object]');\n  }\n\n  static isArray(arr) {\n    return (Object.prototype.toString.call(arr) === '[object Array]');\n  }\n\n  static isString(str) {\n    return (Object.prototype.toString.call(str) === '[object String]');\n  }\n\n  static isEmpty(value) {\n    return (value === undefined || value === null || value.trim() === '');\n  }\n\n  static isEmptyObject(value) {\n    return (value === undefined || value === null);\n  }\n\n  static isValidUrl(url) {\n    let regx = /^(http[s]?:\\/\\/){0,1}(www\\.){0,1}[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,5}[\\.]{0,1}/;\n    return regx.test(url)\n  }\n\n}\n","import TypeCheck from './TypeCheck';\n\nexport default class Request{\n\n  static TYPES() {\n    return {\n      'string' : 1,\n      'json' : 2,\n      'form' : 3\n    };\n  }\n\n  constructor(url) {\n    this.setUrl(url);\n    this.headers = {};\n  }\n\n  setUrl(url) {\n    if (!TypeCheck.isString(url) || TypeCheck.isEmpty(url)) {\n      throw new Error(\"Invalid url string\");\n    }else if(!TypeCheck.isValidUrl(url)){\n      throw new Error(\"Invalid url string\");\n    }\n    this.url = url;\n  }\n\n  getUrl() {\n    return this.url;\n  }\n\n  addHeader(key, value) {\n    if (TypeCheck.isObject(key) || TypeCheck.isArray(key)) {\n      throw new Error(\"Invalid header key type\");\n    }\n    if (TypeCheck.isObject(value) || TypeCheck.isArray(value)) {\n      throw new Error(\"Invalid header value type\");\n    }\n    this.headers[key] = value;\n  }\n\n  addHeaders(headersObj) {\n    if (!TypeCheck.isObject(headersObj)) {\n      throw new Error(\"Invalid header object type\");\n    }\n    for (var property in headersObj) {\n      this.headers[property] = headersObj[property];\n    }\n  }\n\n  getHeaders() {\n    return this.headers;\n  }\n\n  setStringData(stringData) {\n    if (TypeCheck.isObject(stringData) || TypeCheck.isArray(stringData)) {\n      throw new Error(\"Invalid string data\");\n    }\n    this.stringData = stringData;\n    this.type = Request.TYPES().string;\n    this.data = stringData;\n  }\n\n  getStringData() {\n    return this.stringData;\n  }\n\n  setFormData(fromData) {\n    if (TypeCheck.isObject(fromData)) {\n      this.fromData = fromData;\n      this.type = Request.TYPES().form;\n      this.data = Request.generateFormBody(this.formData);\n    }else{\n      throw new Error(\"Invalid form data params\");\n    }\n  }\n\n  getFormData() {\n    return this.fromData;\n  }\n\n  setJsonData(jsonData) {\n    if (TypeCheck.isObject(jsonData) || TypeCheck.isArray(jsonData)) {\n      this.jsonData = jsonData;\n      this.type = Request.TYPES().json;\n      this.data = JSON.stringify(this.jsonData);\n    }else{\n      throw new Error(\"Invalid json data\");\n    }\n  }\n  getJsonData() {\n    return this.jsonData;\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  static generateFormBody(requestObj) {\n    let formBody = [];\n    for (let property in requestObj) {\n      let encodedKey = encodeURIComponent(property);\n      let encodedValue = encodeURIComponent(requestObj[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    return formBody;\n  }\n\n  setQueryParams(queryParams) {\n    if (TypeCheck.isObject(queryParams)) {\n      this.queryParamsMap = queryParams;\n      this.queryParams = \"?\" + Request.generateFormBody(queryParams);\n    }else{\n      throw new Error(\"Invalid query params\");\n    }\n  }\n\n  getQueryParams() {\n    return this.queryParams;\n  }\n\n  getQueryParamsMap() {\n    return this.queryParamsMap;\n  }\n\n}\n","import RNETWORK from './RNETWORK';\n\nexport default class LOGGER {\n\n  static log(message, error){\n    if(RNETWORK.DEBUG_ENABLED == true){\n      if(error){\n        console.log(message, error);\n      }else{\n        console.log(message);\n      }\n    }\n  }\n\n}\n","import Request from './Request';\nimport TypeCheck from './TypeCheck';\nimport LOGGER from './LOGGER';\nimport Response from './Response';\n\nexport default class RNETWORK {\n\n  static DEBUG_ENABLED = false;\n\n  static get2(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'GET',\n        headers: request.getHeaders(),\n      }).then((apiResponse) => {\n        LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n        response.setStatus(apiResponse.status);\n        response.setHeaders(apiResponse.headers.map);\n        response.setUrl(apiResponse.url);\n        response.setBody(apiResponse._bodyText);\n        postExecuteCallback(response);\n      }).catch((error) => {\n        LOGGER.log(\"Error\", error);\n        response.setError(\"Network Connection Failed\", error);\n        postExecuteCallback(response);\n      });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n  static get(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'GET',\n        headers: request.getHeaders(),\n      })\n      .then(response => {\n        return response.text()\n      })\n      .then((apiResponse) => {\n        LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n        response.setBody(apiResponse);\n        // response.setBody(JSON.stringify(apiResponse));\n        postExecuteCallback(response);\n      }).catch((error) => {\n        LOGGER.log(\"Error\", error);\n        response.setError(\"Network Connection Failed\", error);\n        postExecuteCallback(response);\n      });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n  static post(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'POST',\n        headers: request.getHeaders(),\n        body: request.getData()\n      })\n        .then(response => {\n          return response.text()\n        })\n        .then((apiResponse) => {\n          LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n          response.setBody(apiResponse);\n          // response.setBody(JSON.stringify(apiResponse));\n          postExecuteCallback(response);\n        }).catch((error) => {\n          LOGGER.log(\"Error\", error);\n          response.setError(\"Network Connection Failed\", error);\n          postExecuteCallback(response);\n        });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n\n}\n","import { CALLBACK_URL, ERROR_URL } from './index.js';\n\nexport function MFPaymentStatusRequest(key, keyType) {\n  this.key = key\n  this.keyType = keyType\n}\n\nexport function MFInitiatePayment(invoiceAmount, currencyIso) {\n  this.invoiceAmount = invoiceAmount\n  this.currencyIso = currencyIso\n}\nexport function MFInitiateSessionRequest(customerIdentifier) {\n  this.customerIdentifier = customerIdentifier\n}\nexport function MFExecutePaymentRequest(invoiceValue, paymentMethod, callBackUrl, errorUrl) {\n  this.invoiceValue = invoiceValue\n  if (paymentMethod === undefined) {\n    this.paymentMethod = ''\n  } else {\n   this.paymentMethod = paymentMethod\n  }\n  if (callBackUrl === undefined) {\n    this.callBackUrl = CALLBACK_URL\n  } else {\n    this.callBackUrl = callBackUrl\n  }\n  if (errorUrl === undefined) {\n    this.errorUrl = ERROR_URL\n  } else {\n    this.errorUrl = errorUrl\n  }\n\n  this.customerName = ''\n  this.customerCivilId = ''\n  this.customerReference = ''\n  this.customerEmail = ''\n  this.customerMobile = ''\n  this.invoiceItems = []\n  this.language = 'en'\n  this.expiryDate = null\n  this.customerAddress = new MFCustomerAddress('', '', '', '', '')\n  this.userDefinedField = ''\n  this.displayCurrencyIso = ''\n  this.mobileCountryCode = ''\n  this.supplierCode = 0\n  this.supplierValue = 0\n  this.suppliers = []\n  this.sessionId = ''\n  this.recurringModel = null\n}\n\nexport function MFProduct(name, unitPrice, quantity) {\n  this.name = name\n  this.unitPrice = unitPrice\n  this.quantity = quantity\n}\n\nexport function MFSupplier(supplierCode, proposedShare, invoiceShare) {\n  this.supplierCode = supplierCode\n  this.proposedShare = proposedShare\n  this.invoiceShare = invoiceShare\n}\nexport function MFRecurringModel(recurringType, intervalDays, iteration) {\n  this.recurringType = recurringType\n  this.intervalDays = intervalDays\n  this.iteration = iteration\n}\n\nexport function MFCustomerAddress(block, street, houseBuildingNo, address, addressInstructions) {\n  this.block = block\n  this.street = street\n  this.houseBuildingNo = houseBuildingNo\n  this.address = address\n  this.addressInstructions = addressInstructions\n}\n\nexport function MFCardInfo(\n  cardNumber: String,\n  cardExpiryMonth: String,\n  cardExpiryYear: String,\n  cardSecurityCode: String,\n  cardHolderName: String,\n  paymentType: String,\n  saveToken: Boolean) {\n  this.paymentType = paymentType\n  this.card = new MFCard(cardNumber, cardExpiryMonth, cardExpiryYear, cardSecurityCode, cardHolderName)\n  this.saveToken = saveToken\n  this.bypass = true\n}\n\nfunction MFCard(number, expiryMonth, expiryYear, securityCode, cardHolderName) {\n  this.number = number\n  this.expiryMonth = expiryMonth\n  this.expiryYear = expiryYear\n  this.securityCode = securityCode\n  this.cardHolderName = cardHolderName\n}\n\nexport function MFSendPaymentRequest(invoiceValue, notificationOption, customerName) {\n  this.invoiceValue = invoiceValue\n  this.customerName = customerName\n  this.notificationOption = notificationOption\n  this.mobileCountryIsoCode = '+965'\n  this.displayCurrencyIso = 'KWD'\n  this.customerCivilId = ''\n  this.customerReference = ''\n  this.customerEmail = ''\n  this.customerMobile = ''\n  this.invoiceItems = []\n  this.language = 'en'\n  this.expiryDate = null\n  this.errorUrl = ''\n  this.customerAddress = new MFCustomerAddress('', '', '', '', '')\n  this.callBackUrl = ''\n  this.userDefinedField = ''\n  this.supplierCode = 0\n  this.supplierValue = 0\n}","import Response from '../Network/Response'\nimport {\n  MFInitiatePayment,\n  MFExecutePaymentRequest,\n  MFPaymentStatusRequest,\n  MFCardInfo,\n  MFSendPaymentRequest,\n  MFInitiateSessionRequest\n} from '../Models.js';\nimport {\n  executePaymentJson,\n  sendPaymentJson,\n  issueRequest,\n  parse\n} from './MFPaymentRequest.HelperMethods.js'\nimport { MFPaymentMethodCode, MFLanguage } from '../Enums.js'\nimport { Platform } from 'react-native'\nimport { MFSettings } from '..';\n\n/**\n * @class\n * @classdesc A handle payment requests.\n */\nexport default class MFPaymentRequest {\n  /**\n   * A `MFPaymentRequest` access all MFPaymentRequest methods with same object. \n   * @type {MFPaymentRequest}\n   */\n  static sharedInstance = MFPaymentRequest.sharedInstance == null ? new MFPaymentRequest() : MFPaymentRequest.sharedInstance\n  \n   /**\n    * Retrieves all payment methods available for the user token.\n    * @param  {MFInitiatePayment} request - initiate payment object.\n    * @param  {string} apiLanguage - API language.\n    * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n    */   \n  initiatePayment(request: MFInitiatePayment, apiLanguage, postExecuteCallback) {\n    var jsonData = {\n      'InvoiceAmount': request.invoiceAmount,\n      'CurrencyIso': request.currencyIso\n    };\n    issueRequest(jsonData, 'InitiatePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        if (Platform.OS === 'ios') {\n          postExecuteCallback(response)\n        } else {\n          if (response.getPaymentMethods() !== null) {\n            var data = {PaymentMethods:[]}\n            response.getPaymentMethods().forEach(element => {\n              if (element.PaymentMethodCode !== MFPaymentMethodCode.APPLEPAY) {\n                data.PaymentMethods.push(element)\n              }\n            });\n            var dataString = JSON.stringify(data)\n            var body = '{\"IsSuccess\":'+ response.getBodyJson().IsSuccess + ',\"Message\":\"'+  response.getBodyJson().Message + '\",\"ValidationErrors\":'+ response.getBodyJson().ValidationErrors + ',\"Data\":' + dataString + '}'\n            var response2 = new Response()\n            response2.setBody(body)\n            postExecuteCallback(response2)\n          } else {\n            postExecuteCallback(response)\n          }\n      }\n    }\n    });\n  }\n\n     /**\n    * Initiate session id.\n    * @param  {MFInitiateSessionRequest} request - initiate session object.\n    * @param  {string} apiLanguage - API language.\n    * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n    */   \n   initiateSession(request: MFInitiateSessionRequest, apiLanguage, postExecuteCallback) {\n    var jsonData = undefined\n    if (request !== undefined) {\n    var jsonData = {\n      'CustomerIdentifier': request.customerIdentifier\n    };\n    }\n    issueRequest(jsonData, 'InitiateSession', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n          postExecuteCallback(response)\n    }\n    });\n   }\n\n  /**\n   * execute normal payment.\n   * \n   * @param  navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - execute payment request object.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executePayment(navigation, request: MFExecutePaymentRequest, apiLanguage, postExecuteCallback) {\n\n    var jsonData = executePaymentJson(request);\n\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, true)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        const url = response.getPaymentURL()\n        const recurringId = response.getRecurringId()\n        navigation.navigate('MFWebView', { link: url, apiLanguage: apiLanguage, recurringId: recurringId, postExecuteCallback: postExecuteCallback });\n      }\n    });\n  }  \n  /**\n   * get payment status by invoice id or payment id.\n   * @param  {MFPaymentStatusRequest} paymentStatus - payment status request object.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n   getPaymentStatus(paymentStatus: MFPaymentStatusRequest, apiLanguage, postExecuteCallback) {\n    var jsonData = {\n      'Key': paymentStatus.key,\n      'KeyType': paymentStatus.keyType\n    };\n\n    issueRequest(jsonData, \"GetPaymentStatus\", apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response)\n      }\n    })\n  }\n  \n  /**\n   * execute recurring payment.\n   * @param  {Navigation} navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - exeute payment request object.\n   * @param  {MFCardInfo} cardInfo - card information object\n   * @param  {Int} intervalDays - interval days for recurring\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executeRecurringPayment(navigation, request: MFExecutePaymentRequest, cardInfo: MFCardInfo, intervalDays, apiLanguage, postExecuteCallback) {\n    var jsonData = executePaymentJson(request);\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(true, true)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, intervalDays);\n      }\n    });\n  }\n\n  /**\n   * execute direct payment.\n   * @param  {Navigation} navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - exeute payment request object.\n   * @param  {MFCardInfo} cardInfo - card information object\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executeDirectPayment(navigation, request: MFExecutePaymentRequest, cardInfo: MFCardInfo, apiLanguage, postExecuteCallback) {\n    var jsonData = executePaymentJson(request);\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(true, true)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, undefined);\n      }\n    });\n  }\n  \n  /**\n   * cancel recurring payment.\n   * @param  {String} recurringId - recurring id to cancel.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  cancelRecurringPayment(recurringId: String, apiLanguage, postExecuteCallback) {\n    var encodedRecurringId = encodeURIComponent(recurringId)\n    issueRequest(undefined, 'CancelRecurringPayment?recurringId=' + encodedRecurringId, apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response);\n      }\n    })\n  }\n  \n  /**\n   * to create payment link and send it by link, sms, email, or all.\n   * @param  {MFSendPaymentRequest} request - send payment request object.\n   * @param  {string} apiLanguage - callback to handle response.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  sendPayment(request: MFSendPaymentRequest, apiLanguage, postExecuteCallback) {\n    let jsonData = sendPaymentJson(request)\n\n    issueRequest(jsonData, 'SendPayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response)\n      }\n    })\n  }\n}\n","import Request from '../Network/Request';\nimport RNETWORK from '../Network/RNETWORK';\nimport Response from '../Network/Response';\nimport { MFSettings } from '../MFSettings.js';\nimport { MFKeyType } from '../index.js'\nimport { Platform } from 'react-native'\nimport {MFPaymentStatusRequest} from '../Models.js'\nimport MFPaymentRequest from '../MFPaymentRequest/MFPaymentRequest.js'\nimport { MFLanguage } from '../Enums.js'\n//region REQUEST HANDLE METHODS\nexport function executePaymentJson(request) {\n    if (request.callBackUrl.length !== 0) {\n        CALLBACK_URL = request.callBackUrl;\n    }\n    if (request.errorUrl.length !== 0) {\n        ERROR_URL = request.errorUrl;\n    }\n    \n    var callerType = 'android'\n    var callerOS = 'android'\n    if (Platform.OS === 'ios') {\n        callerOS = 'ios'\n        if(Platform.isPad) {\n            callerType = 'ipad'\n        } else {\n            callerType = 'phone'\n        }\n      }\n    var sourceInfo =   callerType + '-' + callerOS + '-' + Platform.Version + '-react_native-0.0.181'\n    var jsonData = {\n        \"InvoiceValue\": request.invoiceValue,\n        \"CallBackUrl\": CALLBACK_URL,\n        \"ErrorUrl\": ERROR_URL,\n        \"DisplayCurrencyIso\": request.displayCurrencyIso,\n        \"MobileCountryCode\": request.mobileCountryCode,\n        \"UserDefinedField\": request.userDefinedField,\n        \"CustomerName\": request.customerName,\n        \"CustomerCivilId\": request.customerCivilId,\n        \"CustomerReference\": request.customerReference,\n        \"CustomerMobile\": request.customerMobile,\n        \"CustomerEmail\": request.customerEmail,\n        \"Language\": request.language,\n        \"SupplierCode\": request.supplierCode,\n        \"SupplierValue\": request.supplierValue,\n        \"SourceInfo\": sourceInfo\n    };\n    if (request.paymentMethod === '') {\n        jsonData.SessionId = request.sessionId\n    } else {\n        jsonData.PaymentMethodId = request.paymentMethod\n    }\n    if (request.expiryDate !== null) {\n        jsonData.ExpiryDate = request.expiryDate.toISOString();\n    }\n    var invoiceItems = [];\n    for (var i in request.invoiceItems) {\n        var product = request.invoiceItems[i];\n        invoiceItems.push({\n            \"ItemName\": product.name,\n            \"Quantity\": product.quantity,\n            \"UnitPrice\": product.unitPrice\n        });\n    }\n    var suppliers = [];\n    for (var i in request.suppliers) {\n        var supplier = request.suppliers[i];\n        suppliers.push({\n            \"SupplierCode\": supplier.supplierCode,\n            \"ProposedShare\": supplier.proposedShare,\n            \"InvoiceShare\": supplier.invoiceShare\n        });\n    }\n    if (request.recurringModel != null) {\n        var recurringModelData = {\n            \"Iteration\": request.recurringModel.iteration,\n            \"RecurringType\": request.recurringModel.recurringType,\n            \"IntervalDays\": request.recurringModel.intervalDays\n        }\n        jsonData.RecurringModel = recurringModelData\n    }\n    if (invoiceItems.length !== 0) {\n        jsonData.InvoiceItems = invoiceItems;\n    }\n\n    if (suppliers.length !== 0) {\n        jsonData.Suppliers = suppliers;\n    }\n    var customerAddress = request.customerAddress;\n    var customerAddressData = {\n        \"Block\": customerAddress.block,\n        \"Street\": customerAddress.street,\n        \"HouseBuildingNo\": customerAddress.houseBuildingNo,\n        \"Address\": customerAddress.address,\n        \"AddressInstructions\": customerAddress.addressInstructions\n    };\n    jsonData.CustomerAddress = customerAddressData;\n    return jsonData;\n}\nexport function sendPaymentJson(request) {\n    if (request.callBackUrl.length !== 0) {\n        CALLBACK_URL = request.callBackUrl;\n    }\n    if (request.errorUrl.length !== 0) {\n        ERROR_URL = request.errorUrl;\n    }\n    var jsonData = {\n        \"InvoiceValue\": request.invoiceValue,\n        \"NotificationOption\": request.notificationOption,\n        \"CallBackUrl\": CALLBACK_URL,\n        \"ErrorUrl\": ERROR_URL,\n        \"DisplayCurrencyIso\": request.displayCurrencyIso,\n        \"MobileCountryCode\": request.mobileCountryCode,\n        \"UserDefinedField\": request.userDefinedField,\n        \"CustomerName\": request.customerName,\n        \"CustomerCivilId\": request.customerCivilId,\n        \"CustomerReference\": request.customerReference,\n        \"CustomerMobile\": request.customerMobile,\n        \"CustomerEmail\": request.customerEmail,\n        \"Language\": request.language,\n        \"SupplierCode\": request.supplierCode,\n        \"SupplierValue\": request.supplierValue\n    };\n    if (request.expiryDate !== null) {\n        jsonData.ExpiryDate = request.expiryDate.toISOString();\n    }\n    var invoiceItems = [];\n    for (var i in request.invoiceItems) {\n        var product = request.invoiceItems[i];\n        invoiceItems.push({\n            \"ItemName\": product.name,\n            \"Quantity\": product.quantity,\n            \"UnitPrice\": product.unitPrice\n        });\n        if (invoiceItems.length !== 0) {\n            jsonData.InvoiceItems = invoiceItems;\n        }\n        var customerAddress = request.customerAddress;\n        var customerAddressData = {\n            \"Block\": customerAddress.block,\n            \"Street\": customerAddress.street,\n            \"HouseBuildingNo\": customerAddress.houseBuildingNo,\n            \"Address\": customerAddress.address,\n            \"AddressInstructions\": customerAddress.addressInstructions\n        };\n        jsonData.CustomerAddress = customerAddressData;\n    }\n    return jsonData;\n}\nexport function cardInfoJson(cardInfo, intervalDays) {\n\n    if (cardInfo.card !== undefined) {\n        let card = cardInfo.card\n        let cardParameters = {\n            \"CardHolderName\": card.cardHolderName,\n            \"Number\": card.number,\n            \"ExpiryMonth\": card.expiryMonth,\n            \"ExpiryYear\": card.expiryYear,\n            \"SecurityCode\": card.securityCode\n        }\n        var jsonData = {\n            \"PaymentType\": cardInfo.paymentType,\n            \"Card\": cardParameters,\n            \"SaveToken\": cardInfo.saveToken || false,\n            \"Bypass3DS\": cardInfo.bypass\n        }\n        if (intervalDays !== undefined) {\n            jsonData.IntervalDays = intervalDays\n            jsonData.IsRecurring = true\n        }\n        return jsonData\n    }\n    return {\n        \"PaymentType\": cardInfo.paymentType,\n        \"Token\": cardInfo.cardToken || ''\n    }\n}\n//endregion\n\n//region NETOWRK HANDLE METHOD\nexport function loadCountries(tryCount, jsonData, methodName, apiLanguage, withFullPath, postExecuteCallback) {\n    if (tryCount > 3) {\n        return\n    }  \n    issueRequest2(undefined, \"https://portal.myfatoorah.com/Files/API/mf-config.json\", MFLanguage.ENGLISH, true, (response) => {  \n    if (response.error) {\n            loadCountries(tryCount+1, jsonData, methodName, apiLanguage, withFullPath, postExecuteCallback)\n         } else {\n        MFPaymentRequest.sharedInstance.countries = response.getBodyJson()\n        MFSettings.sharedInstance.buildBaseURL()\n        if (methodName != undefined) {\n            issueRequest(jsonData, methodName, apiLanguage, withFullPath, (response) => {\n                postExecuteCallback(response)\n            })\n        }\n    }\n  })\n}\nexport function issueRequest(jsonData, methodName, apiLanguage, withFullPath, postExecuteCallback) {\n    if (MFPaymentRequest.sharedInstance.countries == null && methodName != \"https://portal.myfatoorah.com/Files/API/mf-config.json\") {\n        loadCountries(0, jsonData, methodName, apiLanguage, withFullPath, (response) => {\n            postExecuteCallback(response)\n        })\n        return\n    }\n    var path = MFSettings.sharedInstance.getBaseURL() + methodName;\n    if (withFullPath) {\n        path = methodName\n    }\n    let newRequest = new Request(path);\n    newRequest.addHeader('Content-Type', 'application/json');\n    newRequest.addHeader('Authorization', 'Bearer ' + MFSettings.sharedInstance.getToken());\n    newRequest.addHeader('Accept-Language', apiLanguage);\n    if (jsonData !== undefined) {\n        newRequest.setJsonData(jsonData);\n    }\n\n    RNETWORK.post(newRequest, () => {\n    }, (response: Response) => {\n        postExecuteCallback(response)\n    });\n}\nfunction issueRequest2(jsonData, methodName, apiLanguage, withFullPath, postExecuteCallback) {\n    if (MFPaymentRequest.sharedInstance.countries == null && methodName != \"https://portal.myfatoorah.com/Files/API/mf-config.json\") {\n        loadCountries(jsonData, methodName, apiLanguage, withFullPath, (response) => {\n            postExecuteCallback(response)\n        })\n        return\n    }\n    var path = MFSettings.sharedInstance.getBaseURL() + methodName;\n    if (withFullPath) {\n        path = methodName\n    }\n    let newRequest = new Request(path);\n    newRequest.addHeader('Content-Type', 'application/json');\n    newRequest.addHeader('Accept-Language', apiLanguage);\n    if (jsonData !== undefined) {\n        newRequest.setJsonData(jsonData);\n    }\n\n    RNETWORK.get(newRequest, () => {\n    }, (response: Response) => {\n        postExecuteCallback(response)\n    });\n}\n//endregion\n\n//region PAYMENT HANDLE METHODS\nexport function parseDirectPaymentResponse(cardInfoResponse, response, postExecuteCallback) {\n    if (cardInfoResponse === undefined) {\n        var responseError = new Response();\n        responseError.setError('Error Message', '' + response.getBodyJson().Data.InvoiceId);\n        postExecuteCallback(responseError);\n    }\n    else {\n        var data = response.getBodyJson().Data;\n        if (data !== undefined) {\n            var directPaymentResponse = new Response();\n            var directPaymentJson = {\n                getPaymentStatusResponse: data,\n                cardInfoResponse: cardInfoResponse\n            };\n            directPaymentResponse.setBody(JSON.stringify(directPaymentJson));\n            postExecuteCallback(directPaymentResponse);\n        }\n        else {\n            var responseError = new Response();\n            responseError.setError('Error Message', 'No payment status response');\n            postExecuteCallback(responseError);\n        }\n    }\n}\nexport function parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, intervalDays) {\n    if (response.getBodyJson().Data.IsDirectPayment) {\n        if (response.getPaymentURL() !== undefined) {\n            var jsonData = cardInfoJson(cardInfo, intervalDays);\n            var method = response.getPaymentURL();\n            issueRequest(jsonData, method, apiLanguage, true, (response: Response) => {\n                var errorMessage = response.errorMessage(false, false);\n                if (errorMessage.length !== 0) {\n                    response.setError('Error Message', errorMessage);\n                    postExecuteCallback(response);\n                }\n                else {\n                    handleDirectPayment(response, navigation, cardInfo, apiLanguage, postExecuteCallback);\n                }\n            });\n        }\n        else {\n            var responseError = new Response();\n            responseError.setError('Error Message', 'There is no direct payment URL');\n            postExecuteCallback(responseError);\n        }\n    }\n    else {\n        var responseError = new Response();\n        responseError.setError('Error Message', 'Direct payment is not available for this account, please call executePayment method');\n        postExecuteCallback(responseError);\n    }\n}\nexport function handleDirectPayment(response, navigation, cardInfo, apiLanguage, postExecuteCallback) {\n    if (!cardInfo.bypass) {\n        var cardInfoResponse = response.getBodyJson().Data;\n        var url = cardInfoResponse.PaymentURL;\n        navigation.navigate('MFWebView', { link: url, apiLanguage: apiLanguage, cardInfoResponse: cardInfoResponse, postExecuteCallback: postExecuteCallback });\n    }\n    else {\n        var cardInfoResponse = response.getBodyJson().Data;\n        var paymentID = cardInfoResponse.PaymentId;\n        var paymentStatusRequest = new MFPaymentStatusRequest(paymentID, MFKeyType.PAYMENTID);\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, apiLanguage, (response: Response) => {\n            var errorMessage = response.errorMessage(false, false);\n            if (errorMessage.length !== 0) {\n                response.setError('Error Message', errorMessage);\n                postExecuteCallback(response);\n            }\n            else {\n                parseDirectPaymentResponse(cardInfoResponse, response, postExecuteCallback);\n            }\n        });\n    }\n}\n//endregion\nexport var CALLBACK_URL = 'https://myfatoorah.com/'\nexport var ERROR_URL = 'https://myfatooraherror.com/'","\nimport {\n  MFEnvironment,\n  MFCountry\n} from './Enums.js'\nimport { MFPaymentRequest } from './index.js';\nimport { loadCountries } from './MFPaymentRequest/MFPaymentRequest.HelperMethods'\nexport class MFSettings {\n    static sharedInstance = MFSettings.sharedInstance == null ? new MFSettings() : MFSettings.sharedInstance\n    configure(baseURL, token) {\n      this.environment = baseURL\n        if (baseURL.charAt(baseURL.length-1) !== \"/\") {\n            this.baseURL = baseURL + '/';\n        } else {\n            this.baseURL = baseURL;\n        }\n      this.token = token\n    }\n    configure(token, country, environment) {\n      this.environment = environment\n      this.country = country\n      loadCountries(0, undefined, undefined, undefined, undefined, undefined)\n      this.token = token\n    }\n    buildBaseURL() {\n      this.baseURL = \"\"\n      this.countryValue = MFPaymentRequest.sharedInstance.countries[''+this.country]\n        if(this.environment == MFEnvironment.LIVE) {\n          this.baseURL = this.countryValue.v2\n        } else {\n          this.baseURL = this.countryValue.testv2\n        }\n        if (this.baseURL.charAt(this.baseURL.length-1) !== \"/\") {\n            this.baseURL = this.baseURL + '/';\n        }\n    }\n    getBaseURL() {\n      return  this.baseURL + 'v2/';\n    }\n    getToken() {\n      return this.token\n    }\n    setTheme(theme) {\n      this.theme = theme\n    }\n    getTheme() {\n      if(this.theme === undefined) {\n        return new MFTheme('red', 'gray', 'Payment', 'Cancel')\n      }\n      return this.theme\n    }\n    getInvironment() {\n      return this.environment\n    }\n  }\n\n  export function MFTheme(navigationTintColor, navigationBarTintColor, navigationTitle, cancelButtonTitle) {\n    this.navigationTintColor = navigationTintColor\n    this.navigationBarTintColor = navigationBarTintColor\n    this.navigationTitle = navigationTitle\n    this.cancelButtonTitle = cancelButtonTitle\n}","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { ActivityIndicator, StyleSheet, Button, TouchableOpacity, Image } from 'react-native';\nimport { MFPaymentRequest, MFPaymentStatusRequest } from './index.js';\nimport { CALLBACK_URL, ERROR_URL } from './index.js';\nimport { MFSettings, Response} from './index.js';\nimport { YellowBox } from 'react-native';\nimport {\n  issueRequest\n} from './MFPaymentRequest/MFPaymentRequest.HelperMethods.js'\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n\nexport default class MFWebView extends Component {\n  \n  \n  constructor(props) {\n    super(props);\n  }\n  componentDidUpdate(prevProps) {\n    this.myWebView.reload()\n  }\n\n  //region HELPERS METHODS\n  LoadingIndicatorView() {\n    return <ActivityIndicator color={MFSettings.sharedInstance.getTheme().navigationTintColor} size='large' style={styles.ActivityIndicatorStyle} />\n  }\n  parseURLParams(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n  //endregion\n\n  //region CALLBACKS\n  onNavigationStateChange = (navigationState) => {\n    const url = navigationState.url;\n\n    const { route } = this.props\n    const { navigation } = this.props\n    const { apiLanguage } = route.params\n    const { postExecuteCallback } = route.params\n    const { cardInfoResponse } = route.params\n    const { recurringId } = route.params\n\n    if (url.includes(CALLBACK_URL) || url.includes(ERROR_URL)) {\n      if (url.includes('paymentId')) {\n        issueRequest(undefined, url, apiLanguage, true, (response: Response) => {\n          // var errorMessage = response.errorMessage(false, false);\n          // alert(\"Execute callback: \" + url + \", response: \" + response.getBodyString())\n      });\n        let paymentId = this.parseURLParams('paymentId', url);\n        var paymentStatusRequest = new MFPaymentStatusRequest(paymentId, \"PaymentId\")\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, apiLanguage, (response: Response) => {\n          var errorMessage = response.errorMessage(false, false)\n          if (errorMessage.length !== 0) {\n            response.setError('Error Message', errorMessage)\n            postExecuteCallback(response);\n          } else {\n            if (cardInfoResponse !== undefined) {\n              var directPaymentResponse = new Response()\n              var paymentStatusResponse = response.getBodyJson().Data\n              paymentStatusResponse.RecurringId = recurringId\n              var directPaymentJson = {\n                getPaymentStatusResponse: paymentStatusResponse,\n                cardInfoResponse: cardInfoResponse\n              }\n              directPaymentResponse.setBody(JSON.stringify(directPaymentJson))\n              postExecuteCallback(directPaymentResponse)\n            } else {\n              var paymentResponse = new Response()\n              var paymentStatusResponse = response.getBodyJson().Data\n              paymentStatusResponse.RecurringId = recurringId\n              var responseJSON = {\n                Data: paymentStatusResponse\n              }\n              paymentResponse.setBody(JSON.stringify(responseJSON))\n              postExecuteCallback(paymentResponse)\n            }\n          }\n          navigation.goBack()\n        })\n\n      }\n    }\n  };\n  //endregion\n\n  //region navigationOptions\n  static navigationOptions = ({ navigation, route }) => {\n    return {\n      gestureEnabled: false,\n      title: MFSettings.sharedInstance.getTheme().navigationTitle,\n      headerStyle: {\n        backgroundColor: MFSettings.sharedInstance.getTheme().navigationBarTintColor,\n      },\n      headerTintColor: MFSettings.sharedInstance.getTheme().navigationTintColor,\n      headerRight: () => (\n        <TouchableOpacity onPress={()=> navigation.setParams({ refresh: 1 })}>\n          <Image style={[styles.ImageClass, {tintColor: MFSettings.sharedInstance.getTheme().navigationTintColor}]} source={require('./assets/refresh.png')} />\n        </TouchableOpacity>\n      ),\n      headerLeft: () => (\n        <Button\n          onPress={() => {\n            const { postExecuteCallback } = route.params\n            let response = new Response()\n            response.setError('Error Message', 'User clicked cancel button')\n            postExecuteCallback(response)\n            navigation.goBack()\n          }}\n          title={MFSettings.sharedInstance.getTheme().cancelButtonTitle}\n          color={MFSettings.sharedInstance.getTheme().navigationTintColor}\n        />\n      ),\n    };\n  };\n  //endregion\n  \n  \n  render() {\n    const { route } = this.props\n    const { link } = route.params\n\n    return (\n      <WebView\n        source={{ uri: link }}\n        renderLoading={this.LoadingIndicatorView}\n        startInLoadingState={true}\n        ref={(ref) => this.myWebView = ref}\n        onNavigationStateChange={this.onNavigationStateChange}\n      />\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  ActivityIndicatorStyle: {\n    flex: 1,\n    justifyContent: 'center',\n    top: 0, right: 0, left: 0, bottom: 0,\n    position: 'absolute',\n  },\n  ImageClass:\n  {\n    // Setting up image width.\n    width: 25,\n\n    // Setting up image height.\n    height: 25,\n    margin: 10\n  }\n})","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { YellowBox } from 'react-native';\nimport { MFSettings } from './MFSettings.js'\nimport { MFEnvironment } from './Enums.js';\nimport { MFPaymentRequest } from './index.js'\nimport Response from './Network/Response';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\nexport default class MFCardPaymentView extends Component {\n  constructor(props) {\n    super(props);\n}\n\n    render() {\n      const {scalesPageToFit} = Platform.OS === 'android'\n        return (\n          <WebView\n            ref={ref => (this.webview = ref)}\n            source={{ html: this.buildHtmlText(this.props.sessionId, this.props.countryCode, this.props.labels, this.props.placeholders, this.props.theme, this.props.cardHeight, this.props.borderWidth, this.props.borderRadius, this.props.fontSize) }}\n            scalesPageToFit={scalesPageToFit}\n            bounces={false}\n            scrollEnabled={false}\n            onMessage={event => {\n              let json = JSON.parse(event.nativeEvent.data)\n              if (json.sessionId != null) {\n                this.request.sessionId = json.sessionId\n                MFPaymentRequest.sharedInstance.executePayment(this.navigation, this.request, this.apiLanguage, (response) => {\n                  this.postExecuteCallback(response)\n                });\n              } else {\n                var responseError = new Response();\n                responseError.setError('Error Message', json.error);\n                this.postExecuteCallback(responseError);\n              }\n            }}\n          />\n        )\n      }\n      pay(navigation, request, apiLanguage, postExecuteCallback)  {\n        this.navigation = navigation\n        this.request = request\n        this.apiLanguage = apiLanguage\n        this.postExecuteCallback = postExecuteCallback\n        this.webview.injectJavaScript('submit()');\n      }\n\n\n      buildHtmlText(sessionId, countryCode, labels, placeholders, theme, cardHeight, borderWidth, borderRadius, fontSize) {\n        let librarySrc = \"https://demo.myfatoorah.com/cardview/v1/session.js\"\n        if (MFSettings.sharedInstance.getInvironment() == MFEnvironment.LIVE) {\n          librarySrc = \"https://portal.myfatoorah.com/cardview/v1/session.js\" \n        }\n        const HTML = `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        \n        <head>\n            <meta charset=\"UTF-8\">\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n            <meta name=\"viewport\" content=\"width=device-width,height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n            <style>body { overflow: hidden !important }</style>\n            <style>\n            *:not(input):not(textarea) {\n            -webkit-user-select: none; /* disable selection/Copy of UIWebView */\n                -webkit-touch-callout: none; /* disable the IOS popup when long-press on a link */\n                -webkit-tap-highlight-color: rgba(0,0,0,0);\n            }\n          </style>\n          </head>\n        \n        <body>\n            <script src=\"` + librarySrc +`\"></script>\n            <div style=\"width:100%\">\n                <div id=\"card-element\"></div>\n            </div>        \n            <script>\n                var config = {\n                  countryCode: \"`+countryCode+`\", // Here, add your Country Code.\n                  sessionId: \"` + sessionId + `\", // Here you add the \"SessionId\" you receive from InitiateSession Endpoint.\n                  cardViewId: \"card-element\",\n                  // The following style is optional.\n                  style: {\n                    cardHeight: `+cardHeight+`,\n                    input: {\n                      color: \"`+theme.inputColor+`\",\n                      fontSize: \"`+fontSize+`px\",\n                      fontFamily: \"sans-serif\",\n                      inputHeight: \"32px\",\n                      inputMargin: \"0px\",\n                      borderColor: \"`+theme.inputColor+`\",\n                      borderWidth: \"`+borderWidth+`px\",\n                      borderRadius: \"`+borderRadius+`px\",\n                      boxShadow: \"\",\n                      placeHolder: {\n                        holderName: \"`+placeholders.cardHolderName+`\",\n                        cardNumber: \"`+placeholders.cardNumber+`\",\n                        expiryDate: \"`+placeholders.expiryDate+`\",\n                        securityCode: \"`+placeholders.cvv+`\",\n                      }\n                    },\n                    label: {\n                      display: `+labels.showLabels+`,\n                      color: \"`+theme.labelColor+`\",\n                      fontSize: \"`+fontSize+`px\",\n                      fontFamily: \"sans-serif\",\n                      text: {\n                        holderName: \"`+labels.cardHolderName+`\",\n                        cardNumber: \"`+labels.cardNumber+`\",\n                        expiryDate: \"`+labels.expiryDate+`\",\n                        securityCode: \"`+labels.cvv+`\",\n                      },\n                    },\n                    error: {\n                      borderColor: \"`+theme.errorColor+`\",\n                      borderRadius: \"`+borderRadius+`px\",\n                      boxShadow: \"0px\",\n                    },\n                  },\n              };\n              this.myFatoorah.init(config);\n        \n              function submit() {\n                    this.myFatoorah.submit()\n                    // On success\n                    .then(function (response) {\n                      var data = {\n                        sessionId: response[\"SessionId\"],\n                        cardBrand : response[\"CardBrand\"]\n                    };\n                    let stringJSON = JSON.stringify(data, \"*\")\n                    window.ReactNativeWebView.postMessage(stringJSON);\n                    },\n                    // In case of errors\n                    function (error) {\n                      var data = {\n                        error: error\n                    };\n                    let stringJSON = JSON.stringify(data, \"*\")\n                    window.ReactNativeWebView.postMessage(stringJSON);\n                    });\n                }\n            </script>\n        \n        </body>\n        \n        </html>\n        `;     \n        return HTML\n    }\n}","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { YellowBox, View } from 'react-native';\nimport { MFPaymentRequest, MFPaymentStatusRequest } from './index.js'\nimport { MFSettings } from './MFSettings.js'\nimport { MFEnvironment } from './Enums.js';\nimport Response from './Network/Response';\nimport {\n    executePaymentJson,\n    issueRequest,\n  } from './MFPaymentRequest/MFPaymentRequest.HelperMethods'\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\nexport default class MFInAppApplePayView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        link: ''\n      };\n}\n\n    render() {\n      const {scalesPageToFit} = Platform.OS === 'android'\n        if (this.state.link !== '') {\n            return (\n            <WebView\n                ref={ref => (this.webview = ref)}\n                source={{ uri: this.state.link }}\n                scalesPageToFit={scalesPageToFit}\n                bounces={false}\n                scrollEnabled={false}\n                enableApplePay={true}\n                onMessage={event => {\n                  // alert(event.nativeEvent.data)\n                let json = JSON.parse(event.nativeEvent.data)\n                if (json.SessionId != null) {\n                    this.request.sessionId = json.SessionId\n                    this.requestExecutePayment()\n                } else {\n                    var responseError = new Response();\n                    responseError.setError('Error Message', json.error);\n                    this.postExecuteCallback(responseError);\n                }\n                }}\n            />\n            )\n        } else {\n            return <View style={{ height:60, margin: 0, marginTop: 0, flexDirection: 'column', padding: 0, justifyContent: 'space-evenly', width: '100%' }}>\n          </View>;\n        }\n\n      }\n\n      requestExecutePayment() {\n        var jsonData = executePaymentJson(this.request)\n        issueRequest(jsonData, 'ExecutePayment', this.apiLanguage, false, (response) => {\n          var errorMessage = response.errorMessage(false, true)\n          if (errorMessage.length !== 0) {\n            response.setError(\"Error Message\", errorMessage)\n            this.postExecuteCallback(response);\n          } else {\n            const url = response.getPaymentURL()\n            const invoiceId = response.getInvoiceId()\n            this.executeCallBack(url, invoiceId)\n          }\n        })\n    }\n    executeCallBack(path, invoiceId) {\n        issueRequest(undefined, path, this.apiLanguage, true, (response) => {\n            // var errorMessage = response.errorMessage(false, true)\n            // if (errorMessage.length !== 0) {\n            //   alert(\"executeCallBack error\"+  response)\n            //   response.setError(\"Error Message\", errorMessage)\n            //   postExecuteCallback(response);\n            // } else {\n            //   alert(\"executeCallBack\"+  response)\n              this.getTransactions(invoiceId)\n            // }\n        })\n    }\n    getTransactions(invoiceId) {\n        var paymentStatusRequest = new MFPaymentStatusRequest(invoiceId, \"InvoiceId\")\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, this.apiLanguage, (response) => {\n          var errorMessage = response.errorMessage(false, false)\n          if (errorMessage.length !== 0) {\n            response.setError('Error Message', errorMessage)\n            this.postExecuteCallback(response);\n          } else {\n            this.postExecuteCallback(response)\n          }\n        })\n    }\n\n      load(sessionId, countryCode, request, apiLanguage, postExecuteCallback)  {\n        this.sessionId = sessionId\n        this.countryCode = countryCode\n        this.request = request\n        this.apiLanguage = apiLanguage\n        this.postExecuteCallback = postExecuteCallback\n        let link = this.buildURL()\n        this.setState({ link: link })\n      }\n\n\n      buildURL() {\n        let isLive = MFSettings.sharedInstance.getInvironment() == MFEnvironment.LIVE ? true : false\n        let link = 'https://ap.myfatoorah.com/?sessionId='+this.sessionId+'&countryCode='+this.countryCode+'&currencyCode='+this.request.displayCurrencyIso+'&amount='+this.request.invoiceValue+'&platform=react&isLive='+isLive\n        return link\n    }\n}"],"names":["Response","body","error","JSON","parse","errorMessage","stringify","getBodyJson","Data","SessionId","CountryCode","PaymentMethods","InvoiceId","PaymentURL","RecurringId","fromDirectPayment","fromExecute","getError","IsSuccess","IsDirectPayment","undefined","InvoiceTransactions","message","forEach","element","TransactionStatus","Error","Message","ValidationErrors","Name","MFLanguage","Object","freeze","MFNotificationOption","MFPaymentype","MFMobileCountryCodeISO","MFCurrencyISO","MFKeyType","MFPaymentMethodCode","MFEnvironment","MFCountry","MFRecurringType","TypeCheck","obj","prototype","toString","call","arr","str","value","trim","url","regx","test","Request","setUrl","headers","isString","isEmpty","isValidUrl","key","isObject","isArray","headersObj","property","stringData","type","TYPES","string","data","fromData","form","generateFormBody","formData","jsonData","json","queryParams","queryParamsMap","requestObj","formBody","encodedKey","encodeURIComponent","encodedValue","push","join","LOGGER","RNETWORK","DEBUG_ENABLED","log","request","preExecuteCallback","postExecuteCallback","getUrl","getQueryParams","response","getHeaders","then","apiResponse","setStatus","status","setHeaders","map","setBody","_bodyText","catch","setError","text","getData","MFPaymentStatusRequest","keyType","MFInitiatePayment","invoiceAmount","currencyIso","MFInitiateSessionRequest","customerIdentifier","MFExecutePaymentRequest","invoiceValue","paymentMethod","callBackUrl","errorUrl","CALLBACK_URL","ERROR_URL","customerName","customerCivilId","customerReference","customerEmail","customerMobile","invoiceItems","language","expiryDate","customerAddress","MFCustomerAddress","userDefinedField","displayCurrencyIso","mobileCountryCode","supplierCode","supplierValue","suppliers","sessionId","recurringModel","MFProduct","name","unitPrice","quantity","MFSupplier","proposedShare","invoiceShare","MFRecurringModel","recurringType","intervalDays","iteration","block","street","houseBuildingNo","address","addressInstructions","MFCardInfo","cardNumber","cardExpiryMonth","cardExpiryYear","cardSecurityCode","cardHolderName","paymentType","saveToken","card","MFCard","bypass","number","expiryMonth","expiryYear","securityCode","MFSendPaymentRequest","notificationOption","mobileCountryIsoCode","MFPaymentRequest","apiLanguage","length","Platform","OS","getPaymentMethods","PaymentMethodCode","APPLEPAY","dataString","response2","navigation","executePaymentJson","getPaymentURL","recurringId","getRecurringId","navigate","link","paymentStatus","cardInfo","encodedRecurringId","sendPaymentJson","sharedInstance","callerType","callerOS","isPad","sourceInfo","Version","PaymentMethodId","ExpiryDate","toISOString","i","product","supplier","recurringModelData","RecurringModel","InvoiceItems","Suppliers","customerAddressData","CustomerAddress","cardInfoJson","cardParameters","IntervalDays","IsRecurring","cardToken","loadCountries","tryCount","methodName","withFullPath","ENGLISH","countries","buildBaseURL","issueRequest","path","MFSettings","getBaseURL","newRequest","addHeader","getToken","setJsonData","post","issueRequest2","get","parseDirectPaymentResponse","cardInfoResponse","responseError","directPaymentResponse","directPaymentJson","method","handleDirectPayment","paymentID","PaymentId","paymentStatusRequest","PAYMENTID","getPaymentStatus","baseURL","token","environment","charAt","country","countryValue","LIVE","v2","testv2","theme","MFTheme","navigationTintColor","navigationBarTintColor","navigationTitle","cancelButtonTitle","YellowBox","ignoreWarnings","MFWebView","props","onNavigationStateChange","navigationState","route","params","includes","paymentId","parseURLParams","paymentStatusResponse","paymentResponse","responseJSON","goBack","prevProps","myWebView","reload","getTheme","styles","ActivityIndicatorStyle","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","uri","LoadingIndicatorView","ref","Component","navigationOptions","setParams","refresh","ImageClass","tintColor","require","StyleSheet","create","right","left","bottom","MFCardPaymentView","scalesPageToFit","webview","html","buildHtmlText","countryCode","labels","placeholders","cardHeight","borderWidth","borderRadius","fontSize","event","nativeEvent","executePayment","injectJavaScript","librarySrc","getInvironment","HTML","inputColor","cvv","showLabels","labelColor","errorColor","MFInAppApplePayView","state","requestExecutePayment","height","margin","marginTop","flexDirection","padding","justifyContent","width","invoiceId","getInvoiceId","executeCallBack","getTransactions","buildURL","setState","isLive"],"mappings":"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"}